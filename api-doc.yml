swagger: "2.0"
info:
  description: "To run API handler, use `--api-addr=0.0.0.0:8888` CLI argument"
  version: "1.0.0"
  title: "rportd HTTP API"
host: "yourserver:8888"
basePath: "/api/v1"
securityDefinitions:
  basic_auth:
    type: basic
    description: "HTTP-basic authentication works for all routes"
  bearer_auth:
    description: "Instead of HTTP basic authentication you can retrieve a bearer token using /login endpoint. Send the retrieved token in 'Authorization: Bearer <TOKEN>' header"
    type: apiKey # actually apiKey is not correct type but 'bearer' type is not supported in swagger v2.0
    in: header
    name: "Authorization"
security:
  - bearer_auth: []
  - basic_auth: []
schemes:
  - http
  - https
paths:
  /login:
    get:
      summary: "Generate or renew auth token. Requires HTTP-basic authorization."
      description: ""
      parameters:
        - name: "token-lifetime"
          in: "query"
          description: "initial lifetime in seconds. Max value is 90 days. Default: 10 min"
          required: false
          type: "number"
          format: "int32"
      produces:
        - "application/json"
      responses:
        "200":
          description: ""
          schema:
            type: "object"
            properties:
              data:
                type: "object"
                properties:
                  token:
                    type: "string"
              meta:
                type: "object"
    post:
      summary: "Generate or renew auth token. Requires username and password provided in request body"
      description: "username and password parameters are required. They can be provided either in JSON either in x-www-formurlencoded format"
      # swagger 2.0 does not allow describing a method that accepts multiple content-types
      parameters:
        - name: "token-lifetime"
          in: "query"
          description: "initial lifetime in seconds. Max value is 90 days. Default: 10 min"
          required: false
          type: "number"
          format: "int32"
      produces:
        - "application/json"
      responses:
        "200":
          description: ""
          schema:
            type: "object"
            properties:
              data:
                type: "object"
                properties:
                  token:
                    type: "string"
              meta:
                type: "object"
    delete:
      summary: "Revoke token (logoff). Requires Bearer authorization provided"
      description: ""
      produces:
        - "application/json"
      responses:
        "204":
          description: "token revoked"
  /me:
    get:
      summary: "Returns currently logged in user and groups the user belongs to"
      description: ""
      produces:
        - "application/json"
      responses:
        "200":
          description: "success response"
          schema:
            type: "object"
            properties:
              data:
                type: "object"
                properties:
                  user:
                    type: "string"
                  groups:
                    type: "array"
                    items:
                      type: string
              meta:
                type: "object"
  /status:
    get:
      summary: "Get information about rport server"
      description: "show health status and server version"
      produces:
        - "application/json"
      responses:
        "200":
          description: "success response"
          schema:
            type: "object"
            properties:
              data:
                type: "object"
                properties:
                  version:
                    type: "string"
                  sessions_count:
                    type: "integer"
                  fingerprint:
                    type: "string"
                  connect_url:
                    type: "string"
              meta:
                type: "object"
  /sessions:
    get:
      tags:
        - "Client Sessions and Tunnels"
      parameters:
        - name: "sort"
          in: "query"
          description: "Sort option '-<field>'(desc) or '<field>'(asc). <field> can be one of 'id', 'name', 'os', 'hostname', 'version'."
          required: false
          type: "string"
      summary: "List active and disconnected client connections. By default sorted by ID."
      description: ""
      produces:
        - "application/json"
      responses:
        "200":
          description: "success response"
          schema:
            type: "object"
            properties:
              data:
                type: "array"
                items:
                  $ref: "#/definitions/Session"
  /sessions/{session_id}/tunnels:
    parameters:
      - name: "session_id"
        in: "path"
        description: "unique session id retrieved previously"
        required: true
        type: "string"
      - name: "local"
        in: "query"
        description: "server address to use for a new tunnel, e.g. '3390' or '0.0.0.0:3390'. If local is not specified, a random server port will be assigned automatically"
        required: false
        type: "string"
      - name: "remote"
        in: "query"
        description: "remote address endpoint, e.g. '3389'"
        required: false
        type: "string"
      - name: "scheme"
        in: "query"
        description: "URI scheme to be used. For example, 'ssh', 'rdp', etc."
        required: false
        type: "string"
      - name: "acl"
        in: "query"
        description: "ACL, IP addresses who is allowed to use the tunnel. For example, '142.78.90.8,201.98.123.0/24,'"
        required: false
        type: "string"
      - name: "check_port"
        in: "query"
        description: "A flag whether to check availability of a public port. By default check is enabled. To disable it specify 'check_port=0'."
        required: false
        type: "string"
    put:
      tags:
        - "Client Sessions and Tunnels"
      summary: "Request new tunnel for active client connection"
      description: ""
      produces:
        - "application/json"
      responses:
        "200":
          description: "success response"
          schema:
            $ref: "#/definitions/Tunnel"
        "400":
          description: "invalid parameters. Error codes: ERR_CODE_PORT_IN_USE, ERR_CODE_TUNNEL_EXIST, ERR_CODE_TUNNEL_TO_PORT_EXIST, ERR_CODE_URI_SCHEME_LENGTH_EXCEED."
          schema:
            $ref: "#/definitions/ErrorPayload"
        "404":
          description: "specified session does not exist or already terminated"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "409":
          description: "can't create requested tunnel. Probably port already busy"
          schema:
            $ref: "#/definitions/ErrorPayload"
  /sessions/{session_id}/tunnels/{tunnel_id}:
    parameters:
      - name: "session_id"
        in: "path"
        description: "unique session id retrieved previously"
        required: true
        type: "string"
      - name: "tunnel_id"
        in: "path"
        description: "unique tunnel id retrieved previously"
        required: true
        type: "string"
    delete:
      tags:
        - "Client Sessions and Tunnels"
      summary:  "Terminate specified tunnel"
      description: ""
      responses:
        "204":
          description: "tunnel terminated"
        "400":
          description: "invalid parameters"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "404":
          description: "specified session or tunnel does not exist or already terminated"
          schema:
            $ref: "#/definitions/ErrorPayload"
  /sessions/{session_id}/commands:
    get:
      tags:
        - "Commands"
      summary: "Returns a short info about all client commands"
      description: "Returns a list of all running and finished commands sorted by finished time in desc with running commands at the beginning"
      produces:
        - "application/json"
      parameters:
        - name: "session_id"
          in: "path"
          description: "unique session id retrieved previously"
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            properties:
              data:
                type: "array"
                items:
                  $ref: "#/definitions/JobSummary"
        "405":
          description: "Persistent storage required. A data dir or a database table is required to activate this feature."
          schema:
            $ref: "#/definitions/ErrorPayload"
        "500":
          description: "Invalid Operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
    post:
      tags:
        - "Commands"
      summary: "Execute a command by the rport client."
      description: "NOTE: if command limitation is enabled by an rport client then a full path command can be required to use. See https://github.com/cloudradar-monitoring/rport/blob/master/docs/command-execution.md for more details"
      produces:
        - "application/json"
      parameters:
        - name: "session_id"
          in: "path"
          description: "unique session id retrieved previously"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "remote command to execute by the rport client"
          required: true
          schema:
            type: "object"
            properties:
              command:
                type: "string"
                description: "remote command to execute by the rport client. NOTE: if command limitation is enabled by an rport client then a full path command can be required to use. See https://github.com/cloudradar-monitoring/rport/blob/master/docs/command-execution.md for more details"
              shell:
                type: "string"
                enum: [cmd, powershell]
                description: "command shell to use to execute the command. Is applicable only for windows clients. If not set 'cmd' is used by default"
              timeout_sec:
                type: "integer"
                description: "timeout in seconds to observe the command execution. If not set a default timeout (60 seconds) is used"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            properties:
              data:
                type: "object"
                properties:
                  jid:
                    type: "string"
                    description: "job id of the corresponding command"
        "400":
          description: "Invalid request parameters"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "404":
          description: "Active session not found"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "405":
          description: "Persistent storage required. A data dir or a database table is required to activate this feature."
          schema:
            $ref: "#/definitions/ErrorPayload"
        "409":
          description: "Could not execute the command. Probably a previous command is still running"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "500":
          description: "Invalid Operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
  /sessions/{session_id}/commands/{job_id}:
    get:
      tags:
        - "Commands"
      summary: "Returns a detailed info about a specific client command"
      description: "Returns a detailed info about a command by given id"
      produces:
        - "application/json"
      parameters:
        - name: "session_id"
          in: "path"
          description: "unique session id retrieved previously"
          required: true
          type: "string"
        - name: "job_id"
          in: "path"
          description: "unique job id retrieved previously"
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            properties:
              data:
                $ref: "#/definitions/Job"
        "400":
          description: "Command not found"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "405":
          description: "Persistent storage required. A data dir or a database table is required to activate this feature."
          schema:
            $ref: "#/definitions/ErrorPayload"
        "500":
          description: "Invalid Operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
  /commands:
    get:
      tags:
        - "Commands"
      summary: "Returns a short info about all multi-client commands"
      description: "Returns a list of all running and finished commands sorted by started time in desc order"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            properties:
              data:
                type: "array"
                items:
                  $ref: "#/definitions/MultiJobSummary"
        "405":
          description: "Persistent storage required. A data dir or a database table is required to activate this feature."
          schema:
            $ref: "#/definitions/ErrorPayload"
        "500":
          description: "Invalid Operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
    post:
      tags:
        - "Commands"
      summary: "Execute a command on multiple rport clients."
      description: "NOTE: if command limitation is enabled by an rport client then a full path command can be required to use. See https://github.com/cloudradar-monitoring/rport/blob/master/docs/command-execution.md for more details"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "properties and remote command to execute by rport clients"
          required: true
          schema:
            type: "object"
            properties:
              command:
                type: "string"
                description: "remote command to execute by rport clients. NOTE: if command limitation is enabled by an rport client then a full path command can be required to use. See https://github.com/cloudradar-monitoring/rport/blob/master/docs/command-execution.md for more details"
              client_ids:
                type: "array"
                items:
                  type: string
                minItems: 2
                description: "list of client IDs (i.e. session IDs) where to run the command"
              shell:
                type: "string"
                enum: [cmd, powershell]
                description: "command shell to use to execute the command. Is applicable only for windows clients. If not set 'cmd' is used by default"
              timeout_sec:
                type: "integer"
                description: "timeout in seconds to observe the command execution on each client separately. If not set a default timeout (60 seconds) is used"
              execute_concurrently:
                type: "boolean"
                description: "if true - execute the command concurrently on clients. If false - sequentially in order that is in 'client_ids'. By default is false"
              abort_on_error:
                type: "boolean"
                description: "applicable only if 'execute_concurrently' is false. If true - abort the entire cycle if the execution fails on some client. By default is false"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            properties:
              data:
                type: "object"
                properties:
                  jid:
                    type: "string"
                    description: "job id of the corresponding command"
        "400":
          description: "Invalid request parameters"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "404":
          description: "Session not found"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "405":
          description: "Persistent storage required. A data dir or a database table is required to activate this feature."
          schema:
            $ref: "#/definitions/ErrorPayload"
        "500":
          description: "Invalid Operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
  /commands/{job_id}:
    get:
      tags:
        - "Commands"
      summary: "Returns a detailed info about a specific multi-client command"
      description: "Returns a detailed info about a multi-client command by given id with child jobs as well"
      produces:
        - "application/json"
      parameters:
        - name: "job_id"
          in: "path"
          description: "unique job id retrieved previously"
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            properties:
              data:
                $ref: "#/definitions/MultiJob"
        "400":
          description: "Command not found"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "405":
          description: "Persistent storage required. A data dir or a database table is required to activate this feature."
          schema:
            $ref: "#/definitions/ErrorPayload"
        "500":
          description: "Invalid Operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
  /ws/commands:
    get:
      tags:
        - "Commands"
      summary: "Web Socket Connection to execute a remote command on rport client(s)"
      description: "
      NOTE: swagger is not designed to document WebSocket API. This is a temporary solution.\n

      A new web socket is created for each new request to execute a remote command on rport client(s).\n
      Steps:\n
      1. To pass authentication - include \"access_token\" param into the url. The value is a jwt token that is created by 'login' API endpoint.\n
      2. Upgrades the current connection to Web Socket.\n
      3. Then server waits for an inbound message from UI client. It should be a JSON object `ExecuteCmdRequest`(see in 'Models')\n
      For example,\n
      {\n
        \"command\": \"/usr/bin/whoami\",\n
        \"client_ids\": [ \"qa-lin-debian9\", \"qa-lin-debian10\", \"qa-lin-centos8\", \"qa-lin-ubuntu18\", \"qa-lin-ubuntu16\" ],\n
        \"timeout_sec\": 30,\n
        \"execute_concurrently\": true\n
      }\n
      4. Validates the inbound msg. If it fails - server sends an outbound JSON message `ErrorPayload`(see in 'Models') and closes the connection.\n
      5. Server sends a given command to rport client(s) to execute.\n
      6. As soon as it gets a result from each rport client - it sends an outbound JSON message `Job`(see in 'Models').\n
         It can contain a non-empty 'error' field if server wasn't able to send the command to the rport client.\n
         Number of outbound messages is expected to be as many as client IDs in the request. Or less if it's not a concurrent mode and 'abort_on_error' is turned on.\n
      7. As soon as all rport clients send back the result - connection is closed by server.\n
      8. Also, a current connection can be closed by UI client.\n
      "
      produces:
        - "application/json"
      parameters:
        - name: "access_token"
          in: "query"
          description: "JWT token that is created by 'login' API endpoint. Required to pass the authentication."
          required: true
          type: "string"
      responses:
        "405":
          description: "Persistent storage required. A data dir or a database table is required to activate this feature."
          schema:
            $ref: "#/definitions/ErrorPayload"
  /clients:
    get:
      tags:
        - "Rport Client Auth Credentials"
      summary: "Returns all rport clients credentials. Sorted by ID in asc order."
      description: ""
      produces:
        - "application/json"
      responses:
        "200":
          description: "Success response."
          schema:
            type: "object"
            properties:
              data:
                type: "array"
                items:
                  $ref: "#/definitions/Client"
        "405":
          description: "Operation not allowed. Error codes: ERR_CODE_CLIENT_AUTH_DISABLED"
          schema:
            $ref: "#/definitions/ErrorPayload"
    post:
      tags:
        - "Rport Client Auth Credentials"
      summary: "Add a new rport client credentials."
      description: ""
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Client credentials that needs to be added"
          required: true
          schema:
            $ref: "#/definitions/Client"
      responses:
        "204":
          description: "New client added."
        "400":
          description: "invalid parameters"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "405":
          description: "Operation not allowed. Error codes: ERR_CODE_CLIENT_AUTH_DISABLED, ERR_CODE_CLIENT_AUTH_SINGLE, ERR_CODE_CLIENT_AUTH_RO"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "409":
          description: "Client already exist. Err code: ERR_CODE_ALREADY_EXIST"
          schema:
            $ref: "#/definitions/ErrorPayload"
  /clients/{client_id}:
    parameters:
      - name: "client_id"
        in: "path"
        description: "client ID"
        required: true
        type: "string"
      - name: "force"
        in: "query"
        description: "If true, delete a client even when it has active/disconnected sessions."
        required: false
        type: "boolean"
    delete:
      tags:
        - "Rport Client Auth Credentials"
      summary:  "Delete rport client credentials."
      description: ""
      responses:
        "204":
          description: "Client deleted."
        "400":
          description: "invalid parameters. Err codes: ERR_CODE_CLIENT_NOT_FOUND"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "405":
          description: "Operation not allowed. Error codes: ERR_CODE_CLIENT_AUTH_DISABLED, ERR_CODE_CLIENT_AUTH_SINGLE, ERR_CODE_CLIENT_AUTH_RO"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "409":
          description: "Could not delete. Client has active or disconnected session(s). Err code: ERR_CODE_CLIENT_HAS_SESSION"
          schema:
            $ref: "#/definitions/ErrorPayload"
  /client-groups:
    get:
      tags:
        - "Client Groups"
      summary: "Returns all client groups"
      description: "Returns a list of all existing client groups sorted by ID in asc order"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            properties:
              data:
                type: "array"
                items:
                  $ref: "#/definitions/ClientGroup"
        "500":
          description: "Invalid Operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
    post:
      tags:
        - "Client Groups"
      summary: "Create a new client group"
      description: "Creates a new client group."
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "client group"
          description: "Client group to create."
          required: true
          schema:
            $ref: '#/definitions/ClientGroup'
      responses:
        "201":
          description: "successful operation"
        "400":
          description: "Invalid request parameters"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "500":
          description: "Invalid Operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
  /client-groups/{group_id}:
    get:
      tags:
        - "Client Groups"
      summary: "Returns a client group"
      description: "Returns a detailed info about a client group by a given id"
      produces:
        - "application/json"
      parameters:
        - name: "group_id"
          in: "path"
          description: "unique client group ID"
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            properties:
              data:
                $ref: "#/definitions/ClientGroup"
        "400":
          description: "Client group not found"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "500":
          description: "Invalid Operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
    put:
      tags:
        - "Client Groups"
      summary: "Save a client group"
      description: "Update an existing client group or save a new client group"
      produces:
        - "application/json"
      parameters:
        - name: "group_id"
          in: "path"
          description: "unique client group ID"
          required: true
          type: "string"
        - in: "body"
          name: "client group"
          description: "Client group to save."
          required: true
          schema:
            $ref: '#/definitions/ClientGroup'
      responses:
        "204":
          description: "successful operation"
        "400":
          description: "Invalid request parameters"
          schema:
            $ref: "#/definitions/ErrorPayload"
        "500":
          description: "Invalid Operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
    delete:
      tags:
        - "Client Groups"
      summary: "Deletes a client group"
      description: "Deletes a client group by a given id"
      produces:
        - "application/json"
      parameters:
        - name: "group_id"
          in: "path"
          description: "unique client group ID"
          required: true
          type: "string"
      responses:
        "204":
          description: "successful operation"
        "500":
          description: "Invalid Operation"
          schema:
            $ref: "#/definitions/ErrorPayload"
definitions:
  Tunnel:
    type: "object"
    properties:
      id:
        type: "string"
      lhost:
        type: "string"
        description: "server listens to this host"
      lport:
        type: "string"
        description: "server listens to this port"
      rhost:
        type: "string"
        description: "client proxies connection to this host"
      rport:
        type: "string"
        description: "client proxies connection to this port"
      lport_random:
        type: "boolean"
        description: "True if lport was chosen automatically with a random available port."
      scheme:
        type: "string"
        description: "URI scheme."
      acl:
        type: "string"
        description: "IP addresses who is allowed to use the tunnel. For example, '142.78.90.8,201.98.123.0/24,'."
  Session:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
        description: "client name"
      os:
        type: "string"
        description: "client OS description"
      os_arch:
        type: "string"
        description: "client cpu architecture (ex: 386, amd64)"
      os_family:
        type: "string"
        description: "client OS family (ex: debian, alpine, Standalone Workstation)"
      os_kernel:
        type: "string"
        description: "client OS kernel (ex: linux, windows)"
      hostname:
        type: "string"
        description: "client hostname"
      ipv4:
        type: "array"
        items:
          type: string
        description: "list of IPv4 addresses of the client"
      ipv6:
        type: "array"
        items:
          type: string
        description: "list of IPv6 addresses of the client"
      tags:
        type: "array"
        items:
          type: string
      version:
        type: "string"
        description: "client version"
      address:
        type: "string"
        description: "client address"
      tunnels:
        type: "array"
        items:
          $ref: "#/definitions/Tunnel"
  ClientGroup:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Client Group ID"
      description:
        type: "string"
        description: "Client Group description"
      params:
        type: "object"
        description: "Parameters that define what client sessions belong to a given client group.\n

        Each parameter can be specified by:\n
        1. exact match of the property. For example, \"client_id\": [\"test-win2019-tk01\", \"qa-lin-ubuntu16\"]\n
        2. dynamic criteria using wildcards. For example, \"os_family\": [\"linux*\"]\n"
        properties:
          client_id:
            type: "array"
            items:
              type: string
            description: "client ID(s)"
          name:
            type: "array"
            items:
              type: string
            description: "client name(s)"
          os:
            type: "array"
            items:
              type: string
            description: "client OS description(s)"
          os_arch:
            type: "array"
            items:
              type: string
            description: "client cpu architecture(s) (ex: 386, amd64)"
          os_family:
            type: "array"
            items:
              type: string
            description: "client OS family (ex: debian, alpine, Standalone Workstation)"
          os_kernel:
            type: "array"
            items:
              type: string
            description: "client OS kernel(s) (ex: linux, windows)"
          hostname:
            type: "array"
            items:
              type: string
            description: "client hostname(s)"
          ipv4:
            type: "array"
            items:
              type: string
            description: "client IPv4 address(es)"
          ipv6:
            type: "array"
            items:
              type: string
            description: "client IPv6 address(es)"
          tag:
            type: "array"
            items:
              type: string
            description: "client tag(s)"
          version:
            type: "array"
            items:
              type: string
            description: "client version(s)"
          address:
            type: "array"
            items:
              type: string
            description: "client address(es)"
          client_auth_id:
            type: "array"
            items:
              type: string
            description: "client auth ID(s)"
  Client:
    type: "object"
    properties:
      id:
        type: "string"
        description: "client ID"
      password:
        type: "string"
        description: "client password"
  JobStatus:
    type: "string"
    enum: &JOB_STATUS
      - "running"
      - "successful"
      - "unknown"
      - "failed"
  Job:
    type: "object"
    properties:
      jid:
        type: "string"
        description: "job ID"
      sid:
        type: "string"
        description: "session ID"
      pid:
        type: "integer"
        description: "process ID"
      status:
        type: "string"
        enum: *JOB_STATUS
        description: "command status"
      command:
        type: "string"
        description: "executed command"
      shell:
        type: "string"
        description: "command shell that was used to execute the command"
      started_at:
        type: "string"
        format: "data-time"
        description: "command start time"
      finished_at:
        type: "string"
        format: "data-time"
        description: "command finish time"
      created_by:
        type: "string"
        description: "API username who run the command"
      timeout_sec:
        type: "integer"
        description: "timeout in seconds that was used to observe the command execution"
      multi_job_id:
        type: "string"
        description: "multi-client job ID. If it is set then it means this command was initiated by running a multi-client job"
      error:
        type: "string"
        description: "is non-empty when it wasn't able to execute a command on rport client"
      result:
        type: "object"
        description: "command execution result"
        properties:
          stdout:
            type: "string"
            description: "process standard output"
          stderr:
            type: "string"
            description: "process standard error"
  JobSummary:
    type: "object"
    properties:
      jid:
        type: "string"
        description: "job ID"
      status:
        type: "string"
        enum: *JOB_STATUS
        description: "command status"
      finished_at:
        type: "string"
        format: "data-time"
        description: "command finish time"
  MultiJob:
    type: "object"
    properties:
      jid:
        type: "string"
        description: "multi-client job ID"
      started_at:
        type: "string"
        format: "data-time"
        description: "command finish time"
      created_by:
        type: "string"
        description: "API username who run the command"
      client_ids:
        type: "array"
        items:
          type: string
        description: "list of client IDs (i.e. session IDs) where to run the command"
      command:
        type: "string"
        description: "executed command"
      shell:
        type: "string"
        description: "command shell that was used to execute the command"
      timeout_sec:
        type: "integer"
        description: "timeout in seconds that was used to observe the command execution on each client"
      concurrent:
        type: "boolean"
        description: "whether command was executed sequentially or concurrently on clients"
      abort_on_err:
        type: "boolean"
        description: "whether command was specified to abort or not the whole cycle, if the execution fails on some client. Not applicable if 'concurrent' is true"
      jobs:
        type: "array"
        items:
          $ref: "#/definitions/Job"
        description: "clients' jobs"
  MultiJobSummary:
    type: "object"
    properties:
      jid:
        type: "string"
        description: "multi-client job ID"
      started_at:
        type: "string"
        format: "data-time"
        description: "command finish time"
      created_by:
        type: "string"
        description: "API username who run the command"
  ErrorPayload:
    type: "array"
    items:
      $ref: "#/definitions/ErrorPayloadItem"
  ErrorPayloadItem:
    type: "object"
    properties:
      code:
        type: "string"
      title:
        type: "string"
      detial:
        type: "string"
  ExecuteCmdRequest:
    description: "Request that contains a remote command to execute by rport client(s) and other related properties"
    type: "object"
    properties:
      command:
        type: "string"
        description: "remote command to execute by rport client(s). NOTE: if command limitation is enabled by an rport client then a full path command can be required to use. See https://github.com/cloudradar-monitoring/rport/blob/master/docs/command-execution.md for more details"
      client_ids:
        type: "array"
        items:
          type: string
        minItems: 1
        description: "list of client IDs (i.e. session IDs) where to run the command"
      shell:
        type: "string"
        enum: [cmd, powershell]
        description: "command shell to use to execute the command. Is applicable only for windows clients. If not set 'cmd' is used by default"
      timeout_sec:
        type: "integer"
        description: "timeout in seconds to observe the command execution on each client separately. If not set a default timeout (60 seconds) is used"
      execute_concurrently:
        type: "boolean"
        description: "applicable only when multiple clients are specified. If true - execute the command concurrently on clients. If false - sequentially in order that is in 'client_ids'. By default is false"
      abort_on_error:
        type: "boolean"
        description: "applicable only when multiple clients are specified. Applicable only if 'execute_concurrently' is false. If true - abort the entire cycle if the execution fails on some client. By default is false"
