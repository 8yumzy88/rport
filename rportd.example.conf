# Specifies log file path
log_file = "/tmp/rportd.log"

# Specify log level. Values: 'error', 'info', 'debug'.
# Defaults to 'error'
log_level = "info"

# Defines the IP address and port the HTTP server listens on.
address = "0.0.0.0:7777"

# Defines full client connect URL. Defaults to http://{addr}
url = "http://example.com"

# An optional string to seed the generation of a ECDSA public
# and private key pair.
# key_seed = "youknownothing1"

# An optional path to a json file with client credentials.
# This is for authentication of the rport tunnel clients.
# The file should contain a map with clients credentials defined like:
# {
#   "<client1-id>": "<password1>",
#   "<client2-id>": "<password2>"
# }
#auth_file = "/etc/rportd/client-auth.json"

# An optional string representing a single client with full access, in the form of <client-id>:<password>.
# This is equivalent to creating an [auth_file] with {"<client-id>":"<password>"}.
# Use either "auth_file/auth_table" or "auth". Not both.
# If multiple auth options are enabled, rportd exists with an error.
auth = "client:oof3aiyaeFuo"

# Applicable only if [auth_file] is specified and [auth_write] is true.
# An optional param to define an interval to flush rport clients auth info to disk.
# Default: '5s'
save_clients_auth_interval = '1m'

# If you want to delegate the creation and maintenance to an external tool
# you should turn {auth_write} off.
# The API will reject all writing access to the client auth with HTTP 403.
# Applies only to auth_file and auth_table
# Default: true
#auth_write = true

# When using an auth_file creating separate credentials for each client is recommended.
# It increases security because you can lock out clients individually.
# If auth_multiuse_creds is false a client is rejected if another client with the same username is connected
# or has been connected within the {keep_lost_clients} interval.
# Defaults: true
#auth_multiuse_creds = true

# Having set {auth_multiuse_creds} = false, you can omit specifying a client-id.
# You can us the authentication username as client-id to slim down the client configuration.
# Defaults: false
#equate_authusername_clientid = false

# Specifies another HTTP server to proxy requests to when
# rportd receives a normal HTTP request
# proxy = "http://intranet.lan:8080/"

# Defines a list of port numbers or ranges of server ports,
# that would not be used for automatic port assignment.
# Defaults to ['1-1000'].
excluded_ports = [
  '1-1000',
  '8888',
  '8080'
]

# An optional param to define a local directory path to store internal data.
# By default, "/var/lib/rportd" is used on Linux, "C:\ProgramData\rportd" is used on Windows.
#data_dir = "/var/lib/rportd"

# An optional param to define a duration to keep info (sessions, tunnels, etc) about active and disconnected clients.
# Enables to identify disconnected clients at server restart and to reestablish previous tunnels on reconnect.
# By default is "0"(is disabled). It can contain "h"(hours), "m"(minutes), "s"(seconds).
#keep_lost_clients = "1h"

# Applicable only if [keep_lost_clients] is specified. An optional param to define an interval
# to flush info (sessions, tunnels, etc) about active and disconnected clients to disk.
# By default, 1 second is used. It can contain "h"(hours), "m"(minutes), "s"(seconds).
# save_clients_interval = "5s"

# Applicable only if [keep_lost_clients] is specified. An optional param to define an
# interval to clean up internal storage from obsolete disconnected clients.
# By default, '3s' is used. It can contain "h"(hours), "m"(minutes), "s"(seconds).
# cleanup-clients-interval = "3s"

# An optional param to define a file name in [data_dir] directory to store info about
# active and disconnected clients. By default, "csr.json" is used.
#csr_file_name = "csr.json"

# An optional param to define a limit for data that can be sent by rport clients and API requests.
# By default is set to 2048(2Kb).
max_request_bytes = 2048

# An optional param to define a timeout to check whether a remote destination of a requested new tunnel is available,
# i.e. whether a given remote port is open on a client machine. By default, "2s" is used.
# check_port_timeout = "1s"

# specify non-empty api.address to enable API support
[api]
  # Defines the IP address and port the API server listens on
  address = "0.0.0.0:9999"

  # An optional path to a json file with users credentials for API authentication.
  # The file should contain an array with users credentials defined like:
  # [
  # {
  #   "username": "<username>",
  #   "password": "<password>",
  #   "groups": ["<group>", "<group>"]
  # },
  # {
  #   "username": "admin",
  #   "password": "$2y$05$cIOk1IlsdgdUeZpV464d6OXKI1tF2Yc3MWo55xDu4XhopEJmGb2KC",
  #   "groups": ["admins", "sysadmins", "users", "sudo", "some-group"]
  # }
  # ]
  # Use either [api.auth_file] or [api.auth]. Not both.
  # If both are enabled, [api.auth_file] has precedence and [api.auth] is ignored.
  # If both are disabled, API authentication is turned off.
  # The passwords are expected to be bcrypt hashed and they must be compatible with
  # the passwords generated by: htpasswd -bnBC 10 "" password | tr -d ':'.
  # auth_file = "/etc/rportd/api-auth.json"

  # An optional string representing a single pair of user credentials for accessing API,
  # in the form of "<user>:<password>". Use either [api.auth_file] or [api.auth]. Not both.
  # If both are enabled, [api.auth_file] has precedence and [api.auth] is ignored.
  # If both are disabled, API authentication is turned off.
  auth = "admin:1234"

  # Defines JWT secret used to generate new tokens
  # jwt_secret = "foobar2"

  # If specified, rportd will serve files from this directory on the same API address
  # doc_root = "/var/rportd/www"
