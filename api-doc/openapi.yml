openapi: 3.0.1
info:
  title: rportd HTTP(S) API
  description: >-
    To run API, use `--api-addr=yourserver:3000` CLI argument or enable it in
    config file
  version: 1.0.0
servers:
  - url: http://yourserver:3000/api/v1
  - url: https://yourserver:3000/api/v1
security:
  - bearer_auth: []
  - basic_auth: []
tags:
  - name: Login
    description: For more details https://oss.rport.io/docs/no02-api-auth.html
  - name: Profile & Info
    description: Profile and System Information
  - name: Clients and Tunnels
    description: For more details https://oss.rport.io/docs/no09-managing-tunnels.html
  - name: Client Groups
    description: For more details https://oss.rport.io/docs/no04-client-groups.html
  - name: Client Auth Credentials
    description: For more details https://oss.rport.io/docs/no03-client-auth.html
  - name: Commands
    description: For more details https://oss.rport.io/docs/no06-command-execution.html
  - name: Users
    description: For more details https://oss.rport.io/docs/no12-user.html
paths:
  /login:
    get:
      tags:
        - Login
      summary: Generate auth token. Requires HTTP-basic authorization..
      description: |
        * If 2FA is disabled: returns authorization JWT token.
        * If 2FA is enabled: triggers sending 2FA token to the user. 2fa token can be further verified using `/verify-2fa` endpoint. Requires the user to have a valid `two_fa_send_to` delivery option
        * If TotP is enabled, it returns a login token, which should be used to call `/verify-2fa` endpoint and also to create and read a totp secret for the first time (see `/me/totp-secret`)

      parameters:
        - name: token-lifetime
          in: query
          description: >-
            initial lifetime of JWT token in seconds. Max value is 90 days.
            Default: 10 min
          schema:
            maximum: 7776000
            type: integer
            default: 600
      responses:
        '200':
          description: Successful Login Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
    post:
      tags:
        - Login
      summary: Generate auth token. Requires username and password in request body
      description: |-
        If 2FA is disabled: returns authorization JWT token.
         If 2FA is enabled: triggers sending 2FA token to the user. 2fa token can be further verified using `/verify-2fa` endpoint. Requires the user to have a valid `two_fa_send_to` delivery option.
         `username` and `password` should be provided in request body either in JSON either in x-www-formurlencoded format.
         If time based one time passwords (TotP) are enabled (Google/Microsoft authenticator app), it returns a login token, which should be used to call `/verify-2fa` endpoint and also to create and totp secret key for the first time (see `/me/totp-secret`)
         To understand if TotP is enabled, `delivery_method` field will contain `totp_authenticator_app` value, that indicates the limited scope of the JWT token validity.
         If user has already a TotP secret key, the value of totp_key_status field will be 'pending' or 'exists' otherwise.
      parameters:
        - name: token-lifetime
          in: query
          description: |
            initial lifetime of JWT token in seconds. Max value is 90 days.
            Default: 10 min
          schema:
            maximum: 7776000
            type: integer
            default: 600
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /logout:
    delete:
      tags:
        - Login
      summary: Revoke token. Requires Bearer authorization provided
      responses:
        '204':
          description: Token revoked
          content: {}
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /verify-2fa:
    post:
      tags:
        - Login
      summary: >-
        Verify 2FA token of the user. Requires enabled 2FA or time based one
        time code generation (totp_enabled=true).
      description: >-
        Returns authorization JWT token if athe provided username and his 2fa
        token are valid. If totp_enabled is true, you should provide one time
        password as 2fa token.
         If both 2FA and TotP are disabled, this api will return 400.
      parameters:
        - name: token-lifetime
          in: query
          description: >-
            initial lifetime of JWT token in seconds. Max value is 90 days.
            Default: 10 min
          schema:
            maximum: 7776000
            type: integer
            default: 600
      requestBody:
        description: Username and his 2FA token
        content:
          '*/*':
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Unique username
                token:
                  type: string
                  description: >-
                    2FA or TotP options should be enabled. Requires JWT bearer
                    token received from `/login` endpoint. 2FA token that was
                    sent to the user by `/login` endpoints or generated by an
                    Authenticator application. If totp_enabled is true, provide
                    here one time password generated by an Authenticator app.
        required: true
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        description: Authorization JWT token
        '400':
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '401':
          description: Unauthorized, if invalid login token is provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '409':
          description: >-
            2FA is disabled. If totp_enabled is true, this error will indicate
            that the user hasn't generated a TotP private key yet (see
            /me/totp-secret)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
      x-codegen-request-body-name: body
  /me:
    get:
      tags:
        - Profile & Info
      summary: Return currently logged in user and groups the user belongs to
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserGet'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
    put:
      tags:
        - Profile & Info
      summary: Update your own username, password or two_fa_send_to
      requestBody:
        description: your own parameters that you would like to update
        content:
          '*/*':
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: new username, empty if keep the same
                password:
                  type: string
                  description: new password, empty if keep the same
                old_password:
                  type: string
                  description: old password, required only on password change
                two_fa_send_to:
                  type: string
                  description: >-
                    applicable only when 2FA is enabled, ignored otherwise. New
                    two_fa_send_to, empty if keep the same
        required: true
      responses:
        '204':
          description: Successful Operation
          content: {}
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '403':
          description: Missing or incorrect old password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
      x-codegen-request-body-name: updated params
  /me/ip:
    get:
      tags:
        - Profile & Info
      summary: Return a public ip address of a client who makes the request
      responses:
        '200':
          description: Client's ip address
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      ip:
                        type: string
  /me/token:
    post:
      tags:
        - Profile & Info
      summary: Generate a new API token for user and return it
      responses:
        '200':
          description: API token
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        format: uuid
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
    delete:
      tags:
        - Profile & Info
      summary: Delete user's API token
      responses:
        '204':
          description: Successful operation.
          content: {}
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /status:
    get:
      tags:
        - Profile & Info
      summary: Get information about rport server
      description: Show health status, server version, etc
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      version:
                        type: string
                      clients_connected:
                        type: integer
                      clients_disconnected:
                        type: integer
                      clients_auth_source:
                        type: string
                        description: The source of clients authentication credentials
                        enum:
                          - Static Credentials
                          - File
                          - DB
                      clients_auth_mode:
                        type: string
                        description: >-
                          Shows whether it's allowed or not to
                          create/update/delete clients authentication
                          credentials
                        enum:
                          - Read Only
                          - Read Write
                      fingerprint:
                        type: string
                      connect_url:
                        type: array
                        description: Full client connect URL(s)
                        items:
                          type: string
                      users_auth_source:
                        type: string
                        description: The source of API users authentication credentials
                        enum:
                          - Static Credentials
                          - File
                          - DB
                      two_fa_enabled:
                        type: boolean
                        description: >-
                          True if two-factor authentication or totp auth is
                          enabled
                      two_fa_delivery_method:
                        type: string
                        description: >-
                          Delivery method that is used to send auth tokens when
                          2FA is enabled, if totp is enabled,
                          'totp_authenticator_app' is returned
                        enum:
                          - email
                          - pushover
                          - totp_authenticator_app
                      tunnel_proxy_enabled:
                        type: boolean
                        description: True if tunnel reverse proxy is enabled
                      used_ports:
                        type: array
                        description: >-
                          Shows a list of port numbers or ranges of server
                          ports, that are used for automatic and manual port
                          assignment
                        items:
                          type: string
                      excluded_ports:
                        type: array
                        description: >-
                          Shows a list of port numbers or ranges of server
                          ports, that are not used for automatic and manual port
                          assignment
                        items:
                          type: string
                  meta:
                    type: object
                    properties: {}
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /clients:
    get:
      tags:
        - Clients and Tunnels
      summary: >-
        List all active and disconnected client connections. By default sorted
        by ID in asc order
      parameters:
        - name: sort
          in: query
          description: >-
            Sort option `-<field>`(desc) or `<field>`(asc). `<field>` can be one
            of `'id', 'name', 'os', 'hostname', 'version'`. For example,
            `&sort=-name` or `&sort=hostname`, etc
          schema:
            type: string
        - name: filter
          in: query
          description: >-
            Filter option `filter[<FIELD>]=<VALUE>` or
            `filter[<FIELD>|<FIELD>]=<VALUE>,<VALUE>` for OR conditions.
             `<FIELD>` can be one of `'id', 'name', 'os', 'os_arch', 'os_family', 'os_kernel', 'os_full_name', 'os_version', 'os_virtualization_system', 'os_virtualization_role', 'cpu_family', 'cpu_model', 'cpu_model_name', 'cpu_vendor', 'num_cpus', 'timezone', 'hostname', 'ipv4', 'ipv6', 'tags', 'version', 'address' 'client_auth_id', 'allowed_user_groups' and 'groups'`. You can use `*` to filter on any field.
             Multiple filters are possible. You can use `*` wildcards for partial matches. Text matching is case insensitive.
             Examples:
             `filter[os_full_name]=Ubuntu 20.04`
             `filter[os_full_name]=Ubuntu 20.04,Ubuntu 18.04`
             `filter[os_full_name|os]=Ubuntu*`
             `filter[*]=*Ubuntu*,*10.10.*,*Redhat*`
          schema:
            type: string
        - name: fields[<RESOURCE>]
          in: query
          description: >-
            Fields to be returned. It should be provided in the format as
            `fields[<RESOURCE>]=<FIELDS>`, where `<RESOURCE>` is `clients` and
            `<FIELDS>` is a comma separated list of fields. Example:
            `fields[clients]=id,name`. If no fields are specified, only id, name
            and hostname will be returned.
          schema:
            type: string
        - name: page
          in: query
          description: >-
            Pagination options `page[limit]` and `page[offset]` can be used to
            get more than the first page of results. Default limit is 50 and
            maximum is 500. The `count` property in meta shows the total number
            of results.
          schema:
            type: integer
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Client'
                  meta:
                    type: object
                    properties:
                      count:
                        type: integer
        '400':
          description: invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: invalid operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /tunnels:
    get:
      tags:
        - Clients and Tunnels
      summary: >-
        Returns all active tunnels of rport clients that current user has access
        to
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tunnel'
        '500':
          description: invalid operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /clients/{client_id}:
    get:
      tags:
        - Clients and Tunnels
      summary: Get client by id
      parameters:
        - name: client_id
          in: path
          description: unique client ID
          required: true
          schema:
            type: string
        - name: fields[<RESOURCE>]
          in: query
          description: >-
            Fields to be returned. It should be provided in the format as
            `fields[<RESOURCE>]=<FIELDS>`, where `<RESOURCE>` is `clients` and
            `<FIELDS>` is a comma separated list of fields. Example:
            `fields[clients]=id,name`. If no fields are specified, all will be
            returned.
          schema:
            type: string
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Client'
        '404':
          description: Client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
    delete:
      tags:
        - Clients and Tunnels
      summary: Delete a disconnected client by id
      description: >-
        Deletes a client by a given id. This API requires the current client to
        be offline. Returns 400 otherwise.
      parameters:
        - name: client_id
          in: path
          description: unique client ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful operation.
          content: {}
        '400':
          description: 'Invalid request: client is active or provided client ID is empty.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '404':
          description: Client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /clients/{client_id}/tunnels:
    put:
      tags:
        - Clients and Tunnels
      summary: Request a new tunnel for an active client connection
      parameters:
        - name: client_id
          in: path
          description: unique client id retrieved previously
          required: true
          schema:
            type: string
        - name: local
          in: query
          description: >-
            local refers to the local port of the rport server to use for a new
            tunnel, e.g. '3390' or '0.0.0.0:3390'. If local is not specified, a
            random free server port will be selected automatically
          schema:
            type: string
        - name: remote
          in: query
          description: >-
            remote address endpoint, e.g. '3389', '0.0.0.0:22' or
            '192.168.178.1:80', etc
          required: true
          schema:
            type: string
        - name: scheme
          in: query
          description: URI scheme to be used. For example, 'ssh', 'rdp', etc.
          schema:
            type: string
        - name: acl
          in: query
          description: >-
            ACL, IP v4 addresses or ranges who is allowed to use the tunnel
            (ipv6 is not supported yet). For example,
            '142.78.90.8,201.98.123.0/24'
          schema:
            type: string
        - name: check_port
          in: query
          description: >-
            A flag whether to check availability of a public port (remote). By
            default check is enabled. To disable it specify 'check_port=0'.
          schema:
            type: string
        - name: idle-timeout-minutes
          in: query
          description: >-
            Auto-close the tunnel after given period of inactivity in minutes.
            If not provided, default value is 5 minutes. This parameter should
            not be used with a non empty `skip-idle-timeout` parameter
          schema:
            maximum: 10080
            minimum: 0
            type: integer
            default: 5
        - name: auto-close
          in: query
          description: >-
            if > 0 then auto-close the tunnel after given duration. Valid time
            units are 's'(seconds), 'm'(minutes), 'h'(hours). For example,
            '20m', '1m30s', '1h', etc
          schema:
            type: string
        - name: protocol
          in: query
          description: Protocol for the tunnel. Can be `tcp` or `udp`. Default is `tcp`.
          schema:
            type: string
        - name: skip-idle-timeout
          in: query
          description: >-
            Disables the auto-close time of the tunnel (see
            `idle-timeout-minutes` parameter). The parameter should not be used
            with a non empty `idle-timeout-minutes` parameter
          schema:
            type: integer
        - name: http_proxy
          in: query
          description: >-
            If true, triggers the start of a reverse proxy in front of the
            tunnel to handle ssl offloading. Default is false. `http_proxy=true`
            is only allowed in combination with scheme 'http' or 'https'
          schema:
            type: boolean
        - name: host_header
          in: query
          description: >-
            If http_proxy is true, you can specify a host name which will be
            added as header field `Host` to each outgouing proxy request.
            (virtual hosting on remote side)
          schema:
            type: string
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Tunnel'
        '400':
          description: >-
            invalid parameters. Error codes: ERR_CODE_LOCAL_PORT_IN_USE,
            ERR_CODE_REMOTE_PORT_NOT_OPEN, ERR_CODE_INVALID_ACL,
            ERR_CODE_TUNNEL_EXIST, ERR_CODE_TUNNEL_TO_PORT_EXIST,
            ERR_CODE_URI_SCHEME_LENGTH_EXCEED, ERR_CODE_INVALID_IDLE_TIMEOUT.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '404':
          description: specified client does not exist, already terminated ot disconnected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '409':
          description: can't create requested tunnel. Probably port already busy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: invalid operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /clients/{client_id}/tunnels/{tunnel_id}:
    delete:
      tags:
        - Clients and Tunnels
      summary: Terminate a specified tunnel
      parameters:
        - name: client_id
          in: path
          description: unique client id retrieved previously
          required: true
          schema:
            type: string
        - name: tunnel_id
          in: path
          description: unique tunnel id retrieved previously
          required: true
          schema:
            type: string
        - name: force
          in: query
          description: If true, terminate a tunnel even when it is still active.
          schema:
            type: boolean
      responses:
        '204':
          description: tunnel terminated
          content: {}
        '400':
          description: invalid parameters
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '404':
          description: specified client or tunnel does not exist or already terminated
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '409':
          description: 'specified tunnel is still active: it has active connections'
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: invalid operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /clients/{client_id}/acl:
    post:
      tags:
        - Clients and Tunnels
      summary: Limit access to a current client to user groups. Require admin access
      parameters:
        - name: client_id
          in: path
          description: unique client id retrieved previously
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: object
              properties:
                allowed_user_groups:
                  type: array
                  description: >-
                    list of user groups that are allowed to access this client.
                    Empty means only Administrators can access it. You must
                    always specify the entire list of allowed groups, partial
                    updates are not supported
                  items:
                    type: string
        required: true
      responses:
        '204':
          description: Successful Operation
          content: {}
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '404':
          description: Client or specified user groups not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
      x-codegen-request-body-name: body
  /clients/{client_id}/updates-status:
    post:
      tags:
        - Clients and Tunnels
      summary: Trigger updates status refresh on the client
      parameters:
        - name: client_id
          in: path
          description: unique client id retrieved previously
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful Operation
          content: {}
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '404':
          description: Client or specified user groups not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /clients/{client_id}/commands:
    get:
      tags:
        - Commands
      summary: Return a short info about all client commands
      description: >-
        Return a list of all running and finished commands sorted by finished
        time in desc order with running commands at the beginning
      parameters:
        - name: client_id
          in: path
          description: unique client id retrieved previously
          required: true
          schema:
            type: string
        - name: sort
          in: query
          description: >-
            Sort field to be used for sorting, the default sorting is by
            finished time in desc order.
             To change the direction add `-` to the sorting value e.g. `-started_at`. Allowed values are `jid`, `started_at`, `finished_at`, `status`, `multi_job_id`, `created_by`, `schedule_id`.
             You can use as many sort parameters as you want.
          schema:
            type: string
        - name: filter[<FIELD>]
          in: query
          description: >-
            Filter option `filter[<field>]` or `filter[started_at][<op>]`.
            `<field>` can be one of `jid`, `created_by`, `started_at`,
            `finished_at`, `status`, `multi_job_id`, `schedule_id`  and
            `<value>` is the search value,
             e.g. `filter[created_by]=admin` will request only commands created by admin. You can use as many filter parameters as you want.
             Wildcards `*` are supported in the filter `<value>`.
             For `started_at` and `finished_at` filters you need to specify operation: `gt`, `lt`, `since` or `until`.
             If you want to filter by multiple values e.g. find entries either for created_by = admin or other you can use following filters
             `filter[created_by]=admin,other`.
          schema:
            type: string
        - name: page
          in: query
          description: >-
            Pagination options `page[limit]` and `page[offset]` can be used to
            get more than the first page of results. Default limit is 100 and
            maximum is 1000. The `count` property in meta shows the total number
            of results.
          schema:
            type: integer
        - name: fields[<RESOURCE>]
          in: query
          description: >-
            Fields to be returned. It should be provided in the format as
            `fields[<RESOURCE>]=<FIELDS>`, where `<RESOURCE>` is `commands` or
            `result` and `<FIELDS>` is a comma separated list of fields. Default
            is:
            `fields[commands]=jid,status,finished_at&fields[result]=summary`.
          schema:
            type: string
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/JobSummary'
                  meta:
                    type: object
                    properties:
                      count:
                        type: integer
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
    post:
      tags:
        - Commands
      summary: Execute a command by the rport client
      description: >-
        NOTE: if command limitation is enabled by an rport client then a full
        path command can be required to use. See
        https://oss.rport.io/docs/no06-command-execution.html for more details
      parameters:
        - name: client_id
          in: path
          description: unique client id retrieved previously
          required: true
          schema:
            type: string
      requestBody:
        description: remote command to execute by the rport client
        content:
          '*/*':
            schema:
              type: object
              properties:
                command:
                  type: string
                  description: >-
                    remote command to execute by the rport client. NOTE: if
                    command limitation is enabled by an rport client then a full
                    path command can be required to use. See
                    https://oss.rport.io/docs/no06-command-execution.html for
                    more details
                interpreter:
                  type: string
                  description: >-
                    command interpreter to use to execute the command. If not
                    set 'cmd' is used by default on Windows and /bin/sh on Linux
                  enum:
                    - cmd
                    - powershell
                    - tacoscript
                cwd:
                  type: string
                  description: current working directory for the executable command
                is_sudo:
                  type: boolean
                  description: execute a command as sudo user
                timeout_sec:
                  type: integer
                  description: >-
                    timeout in seconds to observe the command execution. If not
                    set a default timeout (60 seconds) is used
        required: true
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      jid:
                        type: string
                        description: job id of the corresponding command
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '404':
          description: Active client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '409':
          description: >-
            Could not execute the command. Probably a previous command is still
            running
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
      x-codegen-request-body-name: body
  /clients/{client_id}/scripts:
    post:
      tags:
        - Scripts
      summary: Execute a script by a rport client.
      description: >-
        Rport server will copy script contents to a temp folder on an rport
        client. Then it will implicitly execute shell script as a command e.g.
        sh /tmp/script.sh.
         NOTE: if command limitation is enabled by an rport client then it should allow execution commands like sh script.sh or cmd script.bat or powershell -executionpolicy bypass -file script.ps1.
         See https://oss.rport.io/docs/no06-command-execution.html#securing-your-environment for more details
      parameters:
        - name: client_id
          in: path
          description: unique client id retrieved previously
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          script to execute by the rport client, the format depends on the
          client's OS
        content:
          application/json:
            schema:
              type: object
              properties:
                script:
                  type: string
                  description: >-
                    base64 encoded script which should be executed on a remote
                    client
                interpreter:
                  type: string
                  description: >-
                    command interpreter to use to execute the script. If not set
                    'cmd' is used by default on Windows and /bin/sh on Linux.
                     For tacoscript interpreter you should install tacoscript binary from here: https://github.com/cloudradar-monitoring/tacoscript#installation. It should also be available in the system path.
                     Additionally, you can use interpreter aliases or full absolute paths to an interpreter of your choice (see https://oss.rport.io/docs/no14-scripts.html#scripts-execution for details).
                  enum:
                    - cmd
                    - powershell
                    - tacoscript
                cwd:
                  type: string
                  description: current working directory for the executable script
                is_sudo:
                  type: boolean
                  description: >-
                    execute a command as sudo user, applicable only for Linux
                    systems
                timeout_sec:
                  type: integer
                  description: >-
                    timeout in seconds to observe the script execution. If not
                    set a default timeout (60 seconds) is used
        required: true
      responses:
        '200':
          description: Successful Operation
          content:
            '*/*':
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      jid:
                        type: string
                        description: >-
                          job id of the underlying command which will execute
                          the provided script
        '400':
          description: Invalid request parameters
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '404':
          description: Active client not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '409':
          description: >-
            Could not execute the command. Probably a previous command is still
            running
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
      x-codegen-request-body-name: body
  /scripts:
    post:
      tags:
        - Scripts
      summary: Execute a script on multiple rport clients
      description: >-
        This API executes the provided script on multiple clients similar to the
        command execution
      requestBody:
        description: properties and remote command to execute by rport clients
        content:
          '*/*':
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/ExecuteScriptRequest'
        required: true
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      jid:
                        type: string
                        description: multi job id of the corresponding command
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '404':
          description: Client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
      x-codegen-request-body-name: body
  /clients/{client_id}/commands/{job_id}:
    get:
      tags:
        - Commands
      summary: Return a detailed info about a specific client command
      description: Return a detailed info about a command by given job id
      parameters:
        - name: client_id
          in: path
          description: unique client id retrieved previously
          required: true
          schema:
            type: string
        - name: job_id
          in: path
          description: unique job id retrieved previously
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Job'
        '404':
          description: Command not found with given client id and job id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /commands:
    get:
      tags:
        - Commands
      summary: Return a short info about all multi-client commands
      description: >-
        Return a list of all running and finished commands sorted by started
        time in desc order
      parameters:
        - name: sort
          in: query
          description: >-
            Sort field to be used for sorting, the default sorting is by started
            time in desc order.
             To change the direction add `-` to the sorting value e.g. `-started_at`. Allowed values are `jid`, `started_at`, `created_by`, `schedule_id`.
             You can use as many sort parameters as you want.
          schema:
            type: string
        - name: filter[<FIELD>]
          in: query
          description: >-
            Filter option `filter[<field>]` or `filter[started_at][<op>]`.
            `<field>` can be one of `jid`, `created_by`, `started_at`,
            `schedule_id`  and `<value>` is the search value,
             e.g. `filter[created_by]=admin` will request only commands created by admin. You can use as many filter parameters as you want.
             For `started_at` filter you need to specify operation: `gt`, `lt`, `since` or `until`.
             If you want to filter by multiple values e.g. find entries either for created_by = admin or other you can use following filters
             `filter[created_by]=admin,other`.
          schema:
            type: string
        - name: page
          in: query
          description: >-
            Pagination options `page[limit]` and `page[offset]` can be used to
            get more than the first page of results. Default limit is 100 and
            maximum is 1000. The `count` property in meta shows the total number
            of results.
          schema:
            type: integer
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/MultiJobSummary'
                  meta:
                    type: object
                    properties:
                      count:
                        type: integer
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
    post:
      tags:
        - Commands
      summary: Execute a command on multiple rport clients
      description: >-
        NOTE: if command limitation is enabled by an rport client then a full
        path command can be required to use. See
        https://oss.rport.io/docs/no06-command-execution.html for more details
      requestBody:
        description: properties and remote command to execute by rport clients
        content:
          '*/*':
            schema:
              type: object
              properties:
                command:
                  type: string
                  description: >-
                    remote command to execute by rport clients. NOTE: if command
                    limitation is enabled by an rport client then a full path
                    command can be required to use. See
                    https://oss.rport.io/docs/no06-command-execution.html for
                    more details
                client_ids:
                  type: array
                  description: >-
                    list of client IDs where to run the command. Min items is 2
                    if group_ids is not specified
                  items:
                    type: string
                group_ids:
                  type: array
                  description: >-
                    list of client group IDs. A command will be executed on all
                    clients that belong to given group(s)
                  items:
                    type: string
                interpreter:
                  type: string
                  description: >-
                    command interpreter to use to execute the command. Is
                    applicable only for windows clients. If not set 'cmd' is
                    used by default
                  enum:
                    - cmd
                    - powershell
                timeout_sec:
                  type: integer
                  description: >-
                    timeout in seconds to observe the command execution on each
                    client separately. If not set a default timeout (60 seconds)
                    is used
                execute_concurrently:
                  type: boolean
                  description: >-
                    if true - execute the command concurrently on clients. If
                    false - sequentially in order that is in 'client_ids'. By
                    default is false
                  default: false
                abort_on_error:
                  type: boolean
                  description: >-
                    applicable only if 'execute_concurrently' is false. If true
                    - abort the entire cycle if the execution fails on some
                    client. By default is true
                  default: true
                cwd:
                  type: string
                  description: current working directory for an executable command
                is_sudo:
                  type: boolean
                  description: execute the command as a sudo user
        required: true
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      jid:
                        type: string
                        description: multi job id of the corresponding command
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '404':
          description: Client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
      x-codegen-request-body-name: body
  /commands/{job_id}:
    get:
      tags:
        - Commands
      summary: Return a detailed info about a specific multi-client command
      description: >-
        Return a detailed info about a multi-client command by given id with
        child jobs as well
      parameters:
        - name: job_id
          in: path
          description: unique multi job id retrieved previously
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/MultiJob'
        '400':
          description: Command not found with a given multi job id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /commands/{job_id}/jobs:
    get:
      tags:
        - Commands
      summary: Return a short info about all multi-client command jobs
      description: >-
        Return a list of all running and finished jobs sorted by finished time
        in desc order with running commands at the beginning
      parameters:
        - name: job_id
          in: path
          description: unique multi-client command id
          required: true
          schema:
            type: string
        - name: sort
          in: query
          description: >-
            Sort field to be used for sorting, the default sorting is by
            finished time in desc order.
             To change the direction add `-` to the sorting value e.g. `-started_at`. Allowed values are `jid`, `started_at`, `finished_at`, `status`, `client_id`, `created_by`, `schedule_id`.
             You can use as many sort parameters as you want.
          schema:
            type: string
        - name: filter[<FIELD>]
          in: query
          description: >-
            Filter option `filter[<field>]` or `filter[started_at][<op>]`.
            `<field>` can be one of `jid`, `created_by`, `started_at`,
            `finished_at`, `status`, `client_id`, `schedule_id`  and `<value>`
            is the search value,
             e.g. `filter[created_by]=admin` will request only commands created by admin. You can use as many filter parameters as you want.
             Wildcards `*` are supported in the filter `<value>`.
             For `started_at` and `finished_at` filters you need to specify operation: `gt`, `lt`, `since` or `until`.
             If you want to filter by multiple values e.g. find entries either for created_by = admin or other you can use following filters
             `filter[created_by]=admin,other`.
          schema:
            type: string
        - name: page
          in: query
          description: >-
            Pagination options `page[limit]` and `page[offset]` can be used to
            get more than the first page of results. Default limit is 100 and
            maximum is 1000. The `count` property in meta shows the total number
            of results.
          schema:
            type: integer
        - name: fields[<RESOURCE>]
          in: query
          description: >-
            Fields to be returned. It should be provided in the format as
            `fields[<RESOURCE>]=<FIELDS>`, where `<RESOURCE>` is `commands` or
            `result` and `<FIELDS>` is a comma separated list of fields. Default
            is:
            `fields[commands]=jid,status,finished_at&fields[result]=summary`.
          schema:
            type: string
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/JobSummary'
                  meta:
                    type: object
                    properties:
                      count:
                        type: integer
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /ws/commands:
    get:
      tags:
        - Commands
      summary: Web Socket Connection to execute a remote command on rport client(s)
      description: >2-
         NOTE: swagger is not designed to document WebSocket API. This is a temporary solution.

        A new web socket is created for each new request to execute a remote
        command on rport client(s).
         Steps:
         1. To pass authentication - include "access_token" param into the url. The value is a jwt token that is created by 'login' API endpoint.
         2. Upgrades the current connection to Web Socket.
         3. Then server waits for an inbound message from UI client. It should be a JSON object `ExecuteCmdRequest`(see in 'Models')
         For example,
         {
         "command": "/usr/bin/whoami",
         "client_ids": [ "qa-lin-debian9", "qa-lin-debian10", "qa-lin-centos8", "qa-lin-ubuntu18", "qa-lin-ubuntu16" ],
         "group_ids": [ "group-1"],
         "timeout_sec": 30,
         "cwd": "/users/root",
         "execute_concurrently": true
        , "is_sudo": true

        , }
         4. Validates the inbound msg. If it fails - server sends an outbound JSON message `ErrorPayload`(see in 'Models') and closes the connection.
         5. Server sends a given command to rport client(s) to execute.
         6. As soon as it gets a result from each rport client - it sends an outbound JSON message `Job`(see in 'Models').
         It can contain a non-empty 'error' field if server wasn't able to send the command to the rport client.
         Number of outbound messages is expected to be as many as rport clients. Or less if it's not a concurrent mode and 'abort_on_error' is turned on.
         7. As soon as all rport clients send back the result - connection is closed by server.
         8. Also, a current connection can be closed by UI client.

        There is a simple UI for testing. Try it out
        http://127.0.0.1:3000/api/v1/test/commands/ui
         
      parameters:
        - name: access_token
          in: query
          description: >-
            JWT token that is created by 'login' API endpoint. Required to pass
            the authentication.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: On success upgrades current connection to websocket
          content:
            application/json:
              schema:
                type: object
  /ws/scripts:
    get:
      tags:
        - Scripts
      summary: Web Socket Connection to execute scripts on rport client(s)
      description: >2
         NOTE: swagger is not designed to document WebSocket API. This is a temporary solution.

        A new web socket is created for each new request to execute a script on
        rport client(s).
         Steps:
         1. To pass authentication - include "access_token" param into the url. The value is a jwt token that is created by 'login' API endpoint.
         2. Upgrades the current connection to Web Socket.
         3. Then server waits for an inbound script message from UI client. It should be a JSON object `ExecuteScriptRequest`(see in 'Models'):
         For example,
         {
         "script": "Y2QgL1VzZXJzL2JyZWF0aGJhdGgvc3NsCmxzIC1sYQpjZCBnb2tleQpjYXQgTElDRU5TRQ==",
         "client_ids": [ "qa-lin-debian9", "qa-lin-debian10", "qa-lin-centos8", "qa-lin-ubuntu18", "qa-lin-ubuntu16" ],
         "group_ids": [ "group-1"],
         "timeout_sec": 30,
         "cwd": "/users/root",
         "execute_concurrently": true
        , "is_sudo": true

        , }
         5. Rport server will create the provided script as a shell script file in the target client(s) (e.g. `/tmp/f68a779d-1d46-414a-b165-d8d2df5f348c.sh` or `f68a779d-1d46-414a-b165-d8d2df5f348.ps1`).
         Then it will run this script as a regular command e.g. `sh /tmp/f68a779d-1d46-414a-b165-d8d2df5f348c.sh`
         If it fails, the server sends an outbound JSON message `ErrorPayload`(see in 'Models') and closes the connection. The temp script will be deleted anyway.
         6. As soon as Rport server gets a result from client(s) - it sends an outbound JSON message `Job`(see in 'Models').
         It can contain a non-empty 'error' field if server wasn't able to send the command to the rport client.
         7. As soon as a rport client sends back the result - connection is closed by server.
         8. Also, a current connection can be closed by UI client.
         There is a simple UI for testing. Try it out http://127.0.0.1:3000/api/v1/test/scripts/ui. You can enable this api by setting `enable_ws_test_endpoints=true` in the configuration file 
      parameters:
        - name: access_token
          in: query
          description: >-
            JWT token that is created by 'login' API endpoint. Required to pass
            the authentication.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: On success upgrades current connection to websocket
          content:
            application/json:
              schema:
                type: object
  /ws/uploads:
    get:
      tags:
        - Upload
      summary: Web Socket Connection to track upload process on clients
      description: |2
         NOTE: swagger is not designed to document WebSocket API. This is a temporary solution.

        The web socket API tracks uploads for all clients and all requests.
         Steps:
         1. To pass authentication - include "access_token" param into the url. The value is a jwt token that is created by 'login' API endpoint.
         2. Upgrades the current connection to Web Socket.
         3. Once the conneciton is open, all uploads to the clients can be tracked through it 4. Server receives an upload request, stores a file in a temp location and sends this information to all provided clients. 5. Clients will establish an sftp connection on top of the existing ssh connection and will download file from the servers temp folder and store it in its own temp folder 6. After download success, client will move the uploaded file from the temp to the desired path and perform chmod/chown operations if needed 7. The result (success/failure/partial failure/ignore) will be reported to the server through the SSH connection 8. The Rport server will send the client upload results to all open websocket connections 9. The websocket connection will stay open till client closes it There is a simple UI for testing. Try it out http://127.0.0.1:3000/api/v1/test/uploads/ui. You can enable this api by setting `enable_ws_test_endpoints=true` in the configuration file 
      parameters:
        - name: access_token
          in: query
          description: >-
            JWT token that is created by 'login' API endpoint. Required to pass
            the authentication.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: On success upgrades current connection to websocket
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ClientUploadResponse'
  /clients-auth:
    get:
      tags:
        - Client Auth Credentials
      summary: >-
        Return all rport clients authentication credentials. Sorted by ID in asc
        order. Require admin access
      parameters:
        - name: filter
          in: query
          description: |
            Filter option `filter[id]=<VALUE>`.
             You can use `*` wildcards for partial matches. Text matching is case insensitive.
             Examples:
             `filter[id]=auth1234`
             `filter[id]=auth*`
          schema:
            type: string
        - name: page
          in: query
          description: >
            Pagination options `page[limit]` and `page[offset]` can be used to
            get more than the first page of results. 

            Default limit is 50 and maximum is 500. The `count` property in meta
            shows the total number of results.
          schema:
            type: integer
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ClientAuth'
                  meta:
                    type: object
                    properties:
                      count:
                        type: integer
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
    post:
      tags:
        - Client Auth Credentials
      summary: Add new rport client authentication credentials. Require admin access
      requestBody:
        description: Client auth credentials to add
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ClientAuth'
        required: true
      responses:
        '204':
          description: New client auth credentials added
          content: {}
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '409':
          description: >-
            Client auth credentials already exist. Err code:
            ERR_CODE_ALREADY_EXIST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
      x-codegen-request-body-name: body
  /clients-auth/{client_auth_id}:
    get:
      tags:
        - Client Auth Credentials
      summary: Get rport client authentication credentials. Require admin access
      parameters:
        - name: client_auth_id
          in: path
          description: client auth ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful Operation
          content:
            '*/*':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ClientAuth'
        '404':
          description: Client auth credentials not found
          content: {}
        '500':
          description: Invalid Operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
    delete:
      tags:
        - Client Auth Credentials
      summary: Delete rport client authentication credentials. Require admin access
      parameters:
        - name: client_auth_id
          in: path
          description: client auth ID
          required: true
          schema:
            type: string
        - name: force
          in: query
          description: >-
            If true, delete a client auth even when it has active/disconnected
            clients.
          schema:
            type: boolean
      responses:
        '204':
          description: Client auth credentials deleted.
          content: {}
        '400':
          description: Invalid parameters
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '404':
          description: Client auth credentials not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '405':
          description: >-
            Operation not allowed. Error codes: ERR_CODE_CLIENT_AUTH_SINGLE,
            ERR_CODE_CLIENT_AUTH_RO
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '409':
          description: >-
            Could not delete. Client Auth has active or disconnected bound
            client(s). Err code: ERR_CODE_CLIENT_AUTH_HAS_CLIENT
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /client-groups:
    get:
      tags:
        - Client Groups
      summary: Return all client groups
      description: Return a list of all existing client groups sorted by ID in asc order
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ClientGroup'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
    post:
      tags:
        - Client Groups
      summary: Create a new client group. Require admin access
      description: Create a new client group.
      requestBody:
        description: >-
          Client group to create. Note: ClientGroup.client_ids field should not
          be set. It's read-only
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ClientGroup'
        required: true
      responses:
        '201':
          description: Successful Operation
          content: {}
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
      x-codegen-request-body-name: client group
  /client-groups/{group_id}:
    get:
      tags:
        - Client Groups
      summary: Return a client group
      description: Return a detailed info about a client group by a given id
      parameters:
        - name: group_id
          in: path
          description: unique client group ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ClientGroup'
        '404':
          description: Client group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
    put:
      tags:
        - Client Groups
      summary: Save a client group. Require admin access
      description: Update an existing client group or save a new client group
      parameters:
        - name: group_id
          in: path
          description: unique client group ID
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          Client group to save. Note: ClientGroup.client_ids field should not be
          set.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ClientGroup'
        required: true
      responses:
        '204':
          description: Successful Operation
          content: {}
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
      x-codegen-request-body-name: client group
    delete:
      tags:
        - Client Groups
      summary: Delete a client group. Require admin access
      description: Delete a client group by a given id
      parameters:
        - name: group_id
          in: path
          description: unique client group ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful Operation
          content: {}
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /users:
    get:
      tags:
        - Users
      summary: Return all users
      description: >-
        Return a list of all existing users sorted by username in asc order.
        This API requires the current user to be member of group
        `Administrators`. Returns 403 otherwise. The `Administrators` group name
        is hardcoded and cannot be changed at the moment
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserGet'
        '400':
          description: >-
            server runs on a static user-password pair, please use JSON file or
            database for user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '403':
          description: >-
            current user should belong to Administrators group to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
    post:
      tags:
        - Users
      summary: Create a new user
      description: >-
        Create a new user. This API requires the current user to be member of
        group `Administrators`. Returns 403 otherwise. The `Administrators`
        group name is hardcoded and cannot be changed at the moment
      requestBody:
        description: User to create.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UserPost'
        required: true
      responses:
        '201':
          description: Successful Operation
          content: {}
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '403':
          description: >-
            current user should belong to Administrators group to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
      x-codegen-request-body-name: user
  /users/{user_id}:
    put:
      tags:
        - Users
      summary: Update a user identified by the provided id
      description: >-
        Update an existing user. This API requires the current user to be member
        of group `Administrators`. Returns 403 otherwise. The `Administrators`
        group name is hardcoded and cannot be changed at the moment.
      parameters:
        - name: user_id
          in: path
          description: unique user ID
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          User to update. Please note, that if you provide some key/values like
          `username: login1`, the not mentioned keys won't be changed, e.g.
          `password`
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UserPost'
        required: true
      responses:
        '204':
          description: Successful Operation
          content: {}
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '403':
          description: >-
            current user should belong to Administrators group to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
      x-codegen-request-body-name: user
    delete:
      tags:
        - Users
      summary: Delete a user
      description: >-
        Deletes a user by a given id. This API requires the current user to be
        member of group `Administrators`. Returns 403 otherwise. The
        `Administrators` group name is hardcoded and cannot be changed at the
        moment
      parameters:
        - name: user_id
          in: path
          description: unique user ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful Operation
          content: {}
        '403':
          description: >-
            current user should belong to Administrators group to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /users/{user_id}/totp-secret:
    delete:
      tags:
        - Users
      summary: >-
        Delete time based one time private key for the provided user. Requires a
        token received from `/verify-2fa` endpoint.
      description: >-
        Deletes private key for an Authenticator app. This API requires the
        current user to be member of group `Administrators`. Returns 403
        otherwise. The `Administrators` group name is hardcoded and cannot be
        changed at the moment
      parameters:
        - name: user_id
          in: path
          description: unique user ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful Operation
          content: {}
        '400':
          description: TotP is disabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '403':
          description: >-
            current user should belong to Administrators group to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /vault-admin:
    get:
      tags:
        - Vault
      summary: Get status of RPort vault
      description: Returns status information about the Rport vault.
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      init:
                        type: string
                        description: >-
                          vault initialization status: if setup-completed vault
                          is initialized or uninitialized otherwise
                        enum:
                          - setup-completed
                          - uninitialized
                      status:
                        type: string
                        description: vault lock status
                        enum:
                          - locked
                          - unlocked
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /vault:
    get:
      tags:
        - Vault
      summary: Read or find vault entries
      description: Reads all vault entries or find some based on the input parameters
      parameters:
        - name: sort
          in: query
          description: >-
            Sort field to be used for values, the sorting direction is by
            default ASC.
             To change the direction add `-` to the sorting value e.g. `-id`. Allowed values are `id`, `client_id`, `created_by`, `created_at`, `key`.
             You can use as many sort parameters as you want.
          schema:
            type: string
        - name: filter[<FIELD>]
          in: query
          description: >-
            Filter to find vault entries. It should be provided in the format as
            `filter[<FIELD>]=<VALUE>`,
             where `<FIELD>` is one of the values `id`, `client_id`, `created_by`, `created_at`, `key` and `<VALUE>` is the search value,
             e.g. `filter[created_by]=admin` will request only vault entries created by admin. You can use as many filter parameters as you want.
             If you want to filter by multiple values e.g. find entries either for client_id = client1 or client2 you can use following filters
             `filter[client_id]=client1,client2`
             Wildcards `*` are supported in the filter `<value>`.
          schema:
            type: string
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/VaultEntryOutputShort'
        '400':
          description: unsupported sort field 'xyz'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '409':
          description: vault is locked or not initialized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
    post:
      tags:
        - Vault
      summary: Creates a new vault entry
      description: |-
        Creates a new entry in vault with the encrypted value field.
         If another entry with the same key and client id combination exists, an error will be returned.
      requestBody:
        description: value in the json format
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/VaultEntryInput'
        required: true
      responses:
        '201':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: unique internal id of the created vault entry
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '409':
          description: >-
            vault is locked or not initialized or another key exists for this
            client
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
      x-codegen-request-body-name: body
  /vault/{id}:
    get:
      tags:
        - Vault
      summary: Read a decrypted vault value
      description: >-
        Reads a vault entry with a decrypted value field. If `required_group`
        value of the stored vault entry is not emtpy,
         only users of this group can read this value.
      parameters:
        - name: id
          in: path
          description: Unique vault entry ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/VaultEntryOutputFull'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '403':
          description: your group doesn't allow access to this value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '404':
          description: Cannot find a vault entry by the provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '409':
          description: vault is locked or not initialized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
    put:
      tags:
        - Vault
      summary: Updates an existing vault entry
      description: |-
        Updates an existing vault entry by the provided `id` parameter.
         If `required_group` value of the stored vault entry is not empty, only users of this group can change this value.
         You need to provide all fields like those you used to create a vault entry. Partial updates are not supported. You can get `id` it by using the listing API. You get the id also when you store a new value.
      parameters:
        - name: id
          in: path
          description: Unique vault entry ID
          required: true
          schema:
            type: integer
      requestBody:
        description: value in the json format
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/VaultEntryInput'
        required: true
      responses:
        '200':
          description: Successful Operation
          content:
            '*/*':
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: unique internal id of the updated vault entry
        '400':
          description: Invalid body parameters
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '403':
          description: your group doesn't allow access to this value
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '409':
          description: vault is locked or not initialized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
      x-codegen-request-body-name: body
    delete:
      tags:
        - Vault
      summary: Deletes an existing vault entry
      description: |-
        Delete a vault entry by the provided `id` parameter.
         If `required_group` value of the stored vault entry is not empty, only users of this group can delete this value.
      parameters:
        - name: id
          in: path
          description: Unique vault entry ID
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Successful Operation
          content: {}
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '403':
          description: your group doesn't allow access to this value
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '404':
          description: cannot find this entry by the provided id
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '409':
          description: vault is locked or not initialized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /vault-admin/init:
    post:
      tags:
        - Vault
      summary: Initialize vault
      description: >-
        Initializes vault database and stores password for further requests.
        This API requires the current user to be member of group
        `Administrators`. Returns 403 otherwise. The `Administrators` group name
        is hardcoded and cannot be changed at the moment
      requestBody:
        description: Password to unlock the vault
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SinglePassword'
        required: true
      responses:
        '201':
          description: Successful Operation
          content: {}
        '400':
          description: Password is too short or too long
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '403':
          description: >-
            current user should belong to Administrators group to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '409':
          description: vault is already initialized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
      x-codegen-request-body-name: password
  /vault-admin/sesame:
    post:
      tags:
        - Vault
      summary: Unlock vault
      description: >-
        Unlocks vault to make it functional. If vault is locked, it won't accept
        any API requests. This API requires the current user to be member of
        group `Administrators`. Returns 403 otherwise. The `Administrators`
        group name is hardcoded and cannot be changed at the moment
      requestBody:
        description: >-
          Password to unlock the vault. It should be the same password, which
          was provided when the vault was initialized.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SinglePassword'
        required: true
      responses:
        '201':
          description: Successful Operation
          content: {}
        '401':
          description: wrong password provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '403':
          description: >-
            current user should belong to Administrators group to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '409':
          description: vault is already unlocked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
      x-codegen-request-body-name: password
    delete:
      tags:
        - Vault
      summary: Locks vault
      description: >-
        Locks vault and delets it's password from server's memory. This API
        requires the current user to be member of group `Administrators`.
        Returns 403 otherwise. The `Administrators` group name is hardcoded and
        cannot be changed at the moment
      responses:
        '204':
          description: Successful Operation
          content: {}
        '403':
          description: >-
            current user should belong to Administrators group to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '409':
          description: vault is already locked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /library/scripts:
    get:
      tags:
        - Library
      summary: Read or find scripts
      description: Reads all scripts or find some based on the input parameters
      parameters:
        - name: sort
          in: query
          description: >-
            Sort field to be used for values, the sorting direction is by
            default ASC.
             To change the direction add `-` to the sorting value e.g. `-id`. All fields are allowed.
             You can use as many sort parameters as you want.
          schema:
            type: string
        - name: filter[<FIELD>]
          in: query
          description: >-
            Filter to find scripts. It should be provided in the format as
            `filter[<FIELD>]=<VALUE>`,
             where `<FIELD>` is one of the fields and `<VALUE>` is the search value,
             e.g. `filter[created_by]=admin` will request only scripts created by admin. You can use as many filter parameters as you want. You can use wildcards `*`.
             If you want to filter by multiple values e.g. find entries either for name = script1 or script2 you can use following filters
             `filter[name]=script1,script2`.
             Wildcards `*` are supported in the filter `<value>`.
          schema:
            type: string
        - name: fields[<RESOURCE>]
          in: query
          description: >-
            Fields to be returned. It should be provided in the format as
            `fields[<RESOURCE>]=<FIELDS>`, where `<RESOURCE>` is `scripts` and
            `<FIELDS>` is a comma separated list of fields. Example:
            `fields[scripts]=id,name`. If no fields are specified, all will be
            returned.
          schema:
            type: string
        - name: page
          in: query
          description: >-
            Pagination options `page[limit]` and `page[offset]` can be used to
            get more than the first page of results. Default limit is 20 and
            maximum is 100. The `count` property in meta shows the total number
            of results.
          schema:
            type: integer
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Script'
                  meta:
                    type: object
                    properties:
                      count:
                        type: integer
        '400':
          description: unsupported sort field 'xyz'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
    post:
      tags:
        - Library
      summary: Creates a new script
      description: |-
        Creates a new script.
         If another entry with the same name exists, an error will be returned.
      requestBody:
        description: value in the json format
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ScriptInput'
        required: true
      responses:
        '201':
          description: Successful Create Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Script'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '409':
          description: another script with the same name exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
      x-codegen-request-body-name: body
  /library/scripts/{id}:
    get:
      tags:
        - Library
      summary: Read a script
      description: Reads a script by the provided ID
      parameters:
        - name: id
          in: path
          description: Unique script ID
          required: true
          schema:
            type: string
        - name: fields[<RESOURCE>]
          in: query
          description: >-
            Fields to be returned. It should be provided in the format as
            `fields[<RESOURCE>]=<FIELDS>`, where `<RESOURCE>` is `scripts` and
            `<FIELDS>` is a comma separated list of fields. Example:
            `fields[scripts]=id,name`. If no fields are specified, all will be
            returned.
          schema:
            type: string
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Script'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '404':
          description: Cannot find a script by the provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
    put:
      tags:
        - Library
      summary: Updates an existing script
      description: |-
        Updates an existing script by the provided `id` parameter.
         You need to provide all fields like those you used to create a script. Partial updates are not supported. You can get `id` by using the listing API. You get the id also when you store a new value.
      parameters:
        - name: id
          in: path
          description: Unique script ID
          required: true
          schema:
            type: string
      requestBody:
        description: value in the json format
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ScriptInput'
        required: true
      responses:
        '200':
          description: Successful Operation
          content:
            '*/*':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Script'
        '400':
          description: Invalid body parameters
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '409':
          description: another script with the same name exists
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
      x-codegen-request-body-name: body
    delete:
      tags:
        - Library
      summary: Deletes an existing script
      description: Delete a script by the provided `id` parameter.
      parameters:
        - name: id
          in: path
          description: Unique script ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful Operation
          content: {}
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '404':
          description: cannot find script by the provided id
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /library/commands:
    get:
      tags:
        - Library
      summary: List commands
      description: Reads all commands or find some based on the input parameters
      parameters:
        - name: sort
          in: query
          description: >-
            Sort field to be used for values, the sorting direction is by
            default ASC.
             To change the direction add `-` to the sorting value e.g. `-id`. All fields are allowed.
             You can use as many sort parameters as you want.
          schema:
            type: string
        - name: filter[<FIELD>]
          in: query
          description: >-
            Filter to find commands. It should be provided in the format as
            `filter[<FIELD>]=<VALUE>`,
             where `<FIELD>` is one of the fields and `<VALUE>` is the search value,
             e.g. `filter[created_by]=admin` will request only commands created by admin. You can use as many filter parameters as you want. You can use wildcard `*`.
             If you want to filter by multiple values e.g. find entries either for name = command1 or command2 you can use following filters
             `filter[name]=command1,command2`.
          schema:
            type: string
        - name: fields[<RESOURCE>]
          in: query
          description: >-
            Fields to be returned. It should be provided in the format as
            `fields[<RESOURCE>]=<FIELDS>`, where `<RESOURCE>` is `comamnds` and
            `<FIELDS>` is a comma separated list of fields. Example:
            `fields[commands]=id,name`. If no fields are specified, all will be
            returned.
          schema:
            type: string
        - name: page
          in: query
          description: >-
            Pagination options `page[limit]` and `page[offset]` can be used to
            get more than the first page of results. Default limit is 20 and
            maximum is 100. The `count` property in meta shows the total number
            of results.
          schema:
            type: integer
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Command'
                  meta:
                    type: object
                    properties:
                      count:
                        type: integer
        '400':
          description: unsupported sort field 'xyz'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
    post:
      tags:
        - Library
      summary: Creates a new command
      description: |-
        Creates a new command.
         If another entry with the same name exists, an error will be returned.
      requestBody:
        description: value in the json format
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CommandInput'
        required: true
      responses:
        '201':
          description: Successful Create Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Command'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '409':
          description: another script with the same name exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
      x-codegen-request-body-name: body
  /library/commands/{id}:
    get:
      tags:
        - Library
      summary: Read a command
      description: Reads a command by the provided ID
      parameters:
        - name: id
          in: path
          description: Unique command ID
          required: true
          schema:
            type: string
        - name: fields[<RESOURCE>]
          in: query
          description: >-
            Fields to be returned. It should be provided in the format as
            `fields[<RESOURCE>]=<FIELDS>`, where `<RESOURCE>` is `commands` and
            `<FIELDS>` is a comma separated list of fields. Example:
            `fields[commands]=id,name`. If no fields are specified, all will be
            returned.
          schema:
            type: string
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Command'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '404':
          description: Cannot find a command by the provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
    put:
      tags:
        - Library
      summary: Updates an existing command
      description: |-
        Updates an existing command by the provided `id` parameter.
         You need to provide all fields like those you used to create a command. Partial updates are not supported. You can get `id` by using the listing API. You get the id also when you store a new value.
      parameters:
        - name: id
          in: path
          description: Unique command ID
          required: true
          schema:
            type: string
      requestBody:
        description: value in the json format
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CommandInput'
        required: true
      responses:
        '200':
          description: Successful Operation
          content:
            '*/*':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Command'
        '400':
          description: Invalid body parameters
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '409':
          description: another command with the same name exists
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
      x-codegen-request-body-name: body
    delete:
      tags:
        - Library
      summary: Deletes an existing command
      description: Delete a command by the provided `id` parameter.
      parameters:
        - name: id
          in: path
          description: Unique command ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful Operation
          content: {}
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '404':
          description: cannot find command by the provided id
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /auditlog:
    get:
      tags:
        - Audit Log
      summary: List auditlog entries
      description: List auditlog entries using the provided filters
      parameters:
        - name: sort
          in: query
          description: >-
            Sort option `-<field>`(desc) or `<field>`(asc). `<field>` can be one
            of `'timestamp', 'username', 'remote_ip', 'application', 'action',
            'affected_id', 'client_id', 'client_hostname'`. For example,
            `&sort=-timestamp`.
          schema:
            type: string
        - name: filter
          in: query
          description: >
            Filter option `filter[<field>]` or `filter[timestamp][<op>]`.

            `<field>` can be one of `'username', 'remote_ip', 'application',
            'action', 'affected_id', 'client_id', 'client_hostname'`.

            For example, `&filter[username]=admin` or
            `filter[timestamp][gt]=2021-10-28`, etc.

            Multiple filters are possible.

            Wildcards `*` are supported in the filter `<value>`.

            *Note: Only members of the Administrators user group are allowed to
            filter by `username`. Returns 403 Forbidden if an unallowed filter
            is used.*
          schema:
            type: string
        - name: page
          in: query
          description: >-
            Pagination options `page[limit]` and `page[offset]` can be used to
            get more than the first page of results. Default limit is 10 and
            maximum is 100. The `count` property in meta shows the total number
            of results.
          schema:
            type: integer
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuditLog'
                  meta:
                    type: object
                    properties:
                      count:
                        type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /me/totp-secret:
    get:
      tags:
        - Profile & Info
      summary: Read secret key and qr for an Authenticator app
      description: >-
        Shows secret key and qr image in base64 format for an Authenticator app.
        Requires a token received from `/verify-2fa` endpoint.
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TotP'
        '400':
          description: TotP is disabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '401':
          description: >-
            Unauthorized, wrong token type provided (e.g. the one received from
            /login endpoint)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '404':
          description: time based one time secret key should be generated for this user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
    post:
      tags:
        - Profile & Info
      summary: Creates a new secret key for an Authenticator app
      description: >-
        Creates a new secret key for an Authenticator app only for the first
        time! If another totP secret already exists for this user, an error will
        appear. Requires a valid JWT token received from the `/login` endpoint.
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TotP'
        '400':
          description: TotP is disabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '401':
          description: Unauthorized or totP secret is already created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
    delete:
      tags:
        - Profile & Info
      summary: >-
        Delete time based one time secret key of the current user. Requires a
        token received from `/verify-2fa` endpoint.
      responses:
        '204':
          description: Successful operation.
          content: {}
        '400':
          description: TotP is disabled
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '401':
          description: >-
            Unauthorized, wrong token type provided (e.g. the one received from
            /login endpoint)
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /clients/{client_id}/graph-metrics:
    get:
      tags:
        - Monitoring
      summary: Lists client metrics for displaying as graphs
      description: >-
        List downsampled monitoring data about client metrics for the provided
        clientID
      parameters:
        - name: client_id
          in: path
          description: Unique client ID
          required: true
          schema:
            type: string
        - name: sort
          in: query
          description: >-
            There is only `timestamp` allowed as sort field. Default direction
            is DESC
             To sort ascending use `&sort=timestamp`.
          schema:
            type: string
        - name: filter[timestamp][<OPERATOR>]
          in: query
          description: >-
            Filter entries by field `timestamp`. `<OPERATOR>` can be one of
            `gt`, `lt`, `since` or `until`.
             `gt` and `lt` require a timestamp value as `unixepoch`. `since` and `until` require a timestamp value in format `RFC3339`.
             e.g. `filter[timestamp][gt]=1636009200&filter[timestamp][lt]=1636009500` or
             e.g. `filter[timestamp][since]=2021-01-01T00:00:00+01:00&filter[timestamp][until]=2021-01-01T01:00:00+01:00`.

             Downsampling data is available for a period `>= 2 hours` and `<= 48 hours`.
             When downsampling takes place you get `avg, min and max` values for `cpu_usage_percent, memory_usage_percent and io_usage_percent`

             
          schema:
            type: string
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/GraphMetrics'
                  links:
                    type: object
                    properties:
                      cpu_usage_percent:
                        type: string
                      mem_usage_percent:
                        type: string
                      io_usage_percent:
                        type: string
                      net_usage_percent_lan:
                        type: string
                      net_usage_bps_lan:
                        type: string
                      net_usage_percent_wan:
                        type: string
                      net_usage_bps_wan:
                        type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '404':
          description: Cannot find measurements by the provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /clients/{client_id}/graph-metrics/{graph_name}:
    get:
      tags:
        - Monitoring
      summary: Lists client metrics for given graph name
      description: >-
        List downsampled monitoring data about client metrics for the provided
        clientID and graph name
      parameters:
        - name: client_id
          in: path
          description: Unique client ID
          required: true
          schema:
            type: string
        - name: graph_name
          in: path
          description: |-
            Unique graph name 
             Possible values are `cpu_usage_percent`, `mem_usage_percent`, `io_usage_percent`, `net_usage_percent_lan`, `net_usage_bps_lan`,
             `net_usage_percent_wan`, `net_usage_bps_wan`
          required: true
          schema:
            type: string
        - name: sort
          in: query
          description: >-
            There is only `timestamp` allowed as sort field. Default direction
            is DESC
             To sort ascending use `&sort=timestamp`.
          schema:
            type: string
        - name: filter[timestamp][<OPERATOR>]
          in: query
          description: >-
            Filter entries by field `timestamp`. `<OPERATOR>` can be one of
            `gt`, `lt`, `since` or `until`.
             `gt` and `lt` require a timestamp value as `unixepoch`. `since` and `until` require a timestamp value in format `RFC3339`.
             e.g. `filter[timestamp][gt]=1636009200&filter[timestamp][lt]=1636009500` or
             e.g. `filter[timestamp][since]=2021-01-01T00:00:00+01:00&filter[timestamp][until]=2021-01-01T01:00:00+01:00`.

             Downsampling data is available for a period `>= 2 hours` and `<= 48 hours`.
             When downsampling takes place you get `avg, min and max` values for one of `cpu_usage_percent, memory_usage_percent, io_usage_percent`, `net_usage_percent_lan`, `net_usage_bps_lan`, `net_usage_percent_wan` or `net_usage_bps_wan`

             
          schema:
            type: string
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/GraphMetricsGraph'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '404':
          description: Cannot find measurements by the provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /clients/{client_id}/metrics:
    get:
      tags:
        - Monitoring
      summary: Lists client metrics
      description: List monitoring data about client metrics for the provided clientID
      parameters:
        - name: client_id
          in: path
          description: Unique client ID
          required: true
          schema:
            type: string
        - name: sort
          in: query
          description: >-
            There is only `timestamp` allowed as sort field. Default direction
            is DESC
             To sort ascending use `&sort=timestamp`.
          schema:
            type: string
        - name: filter[timestamp][<OPERATOR>]
          in: query
          description: >-
            Filter entries by field `timestamp`. `<OPERATOR>` can be one of
            `gt`, `lt`, `since` or `until`.
             `gt` and `lt` require a timestamp value as `unixepoch`. `since` and `until` require a timestamp value in format `RFC3339`.
             e.g. `filter[timestamp][gt]=1636009200&filter[timestamp][lt]=1636009500` or
             e.g. `filter[timestamp][since]=2021-01-01T00:00:00+01:00&filter[timestamp][until]=2021-01-01T01:00:00+01:00`.

             
          schema:
            type: string
        - name: fields[<RESOURCE>]
          in: query
          description: >-
            Fields to be returned. It should be provided in the format as
            `fields[<RESOURCE>]=<FIELDS>`, where `<RESOURCE>` is `metrics` and
            `<FIELDS>` is a comma separated list of fields. Example:
            `fields[metrics]=timestamp,cpu_usage_percent,memory_usage_percent,io_usage_percent`.
            If no fields are specified, `timestamp, cpu_usage_percent,
            memory_usage_percent and io_usage_percent` are returned.
          schema:
            type: string
        - name: page
          in: query
          description: >-
            Pagination options `page[limit]` and `page[offset]` can be used to
            get more than the first page of results. Default limit is 1 and
            maximum is 120.
             The `count` property in meta shows the total number of results.
          schema:
            type: integer
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Metrics'
                  meta:
                    type: object
                    properties:
                      count:
                        type: integer
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '404':
          description: Cannot find measurements by the provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /clients/{client_id}/mountpoints:
    get:
      tags:
        - Monitoring
      summary: Lists client mountpoints
      description: List monitoring data about client mountpoints for the provided clientID
      parameters:
        - name: client_id
          in: path
          description: Unique client ID
          required: true
          schema:
            type: string
        - name: sort
          in: query
          description: >-
            There is only `timestamp` allowed as sort field. Default direction
            is DESC
             To sort ascending use `&sort=timestamp`.
          schema:
            type: string
        - name: filter[timestamp][<OPERATOR>]
          in: query
          description: >-
            Filter entries by field `timestamp`. `<OPERATOR>` can be one of
            `gt`, `lt`, `since` or `until`.
             `gt` and `lt` require a timestamp value as `unixepoch`. `since` and `until` require a timestamp value in format `RFC3339`.
             e.g. `filter[timestamp][gt]=1636009200&filter[timestamp][lt]=1636009500` or
             e.g. `filter[timestamp][since]=2021-01-01T00:00:00+01:00&filter[timestamp][until]=2021-01-01T01:00:00+01:00`.

             
          schema:
            type: string
        - name: page
          in: query
          description: >-
            Pagination options `page[limit]` and `page[offset]` can be used to
            get more than the first page of results. Default limit is 1 and
            maximum is 100.
             The `count` property in meta shows the total number of results.
          schema:
            type: integer
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Mountpoints'
                  meta:
                    type: object
                    properties:
                      count:
                        type: integer
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '404':
          description: Cannot find measurements by the provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /clients/{client_id}/processes:
    get:
      tags:
        - Monitoring
      summary: Lists client processes
      description: List monitoring data about client processes for the provided clientID
      parameters:
        - name: client_id
          in: path
          description: Unique client ID
          required: true
          schema:
            type: string
        - name: sort
          in: query
          description: >-
            There is only `timestamp` allowed as sort field. Default direction
            is DESC
             To sort ascending use `&sort=timestamp`.
          schema:
            type: string
        - name: filter[timestamp][<OPERATOR>]
          in: query
          description: >-
            Filter entries by field `timestamp`. `<OPERATOR>` can be one of
            `gt`, `lt`, `since` or `until`.
             `gt` and `lt` require a timestamp value as `unixepoch`. `since` and `until` require a timestamp value in format `RFC3339`.
             e.g. `filter[timestamp][gt]=1636009200&filter[timestamp][lt]=1636009500` or
             e.g. `filter[timestamp][since]=2021-01-01T00:00:00+01:00&filter[timestamp][until]=2021-01-01T01:00:00+01:00`.

             Fetching data for a period greater than `48 hours` is not allowed. If the period exceeds `2 hours`, than the returned measurement points get downsampled to reduce the amount of data.
             When downsampling takes place you get `average, min and max` values for `cpu_usage_percent, memory_usage_percent and io_usage_percent`

             
          schema:
            type: string
        - name: page
          in: query
          description: >-
            Pagination options `page[limit]` and `page[offset]` can be used to
            get more than the first page of results. Default limit is 1 and
            maximum is 10.
             The `count` property in meta shows the total number of results.
          schema:
            type: integer
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Processes'
                  meta:
                    type: object
                    properties:
                      count:
                        type: integer
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '404':
          description: Cannot find measurements by the provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /clients/{client_id}/stored-tunnels:
    get:
      tags:
        - Clients and Tunnels
      summary: List stored tunnels
      parameters:
        - name: client_id
          in: path
          description: Unique client ID
          required: true
          schema:
            type: string
        - name: sort
          in: query
          description: >-
            Sort field to be used for sorting, the sorting direction is by
            default ASC.
             To change the direction add `-` to the sorting value e.g. `-id`. Allowed values are `created_at`, `name`, `scheme`, `remote_ip`, `remote_port`.
             You can use as many sort parameters as you want.
          schema:
            type: string
        - name: filter[<FIELD>]
          in: query
          description: >-
            Filter to find stored tunnels. It should be provided in the format
            as `filter[<FIELD>]=<VALUE>`,
             where `<FIELD>` is one of the values `name`, `scheme`, `remote_ip`, `remote_port` and `<VALUE>` is the search value,
             e.g. `filter[scheme]=https` will request only stored tunnels with scheme https. You can use as many filter parameters as you want.
             If you want to filter by multiple values e.g. find entries either for scheme = http or https you can use following filters
             `filter[scheme]=http,https`.
          schema:
            type: string
        - name: page
          in: query
          description: >-
            Pagination options `page[limit]` and `page[offset]` can be used to
            get more than the first page of results. Default limit is 10 and
            maximum is 100.
             The `count` property in meta shows the total number of results.
          schema:
            type: integer
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/StoredTunnel'
                  meta:
                    type: object
                    properties:
                      count:
                        type: integer
        '400':
          description: unsupported sort field 'xyz'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
    post:
      tags:
        - Clients and Tunnels
      summary: Creates a new stored tunnel
      parameters:
        - name: client_id
          in: path
          description: Unique client ID
          required: true
          schema:
            type: string
      requestBody:
        description: value in the json format
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/StoredTunnel'
        required: true
      responses:
        '201':
          description: Successful Create Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/StoredTunnel'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '409':
          description: another script with the same name exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
      x-codegen-request-body-name: body
  /clients/{client_id}/stored-tunnels/{id}:
    put:
      tags:
        - Clients and Tunnels
      summary: Updates an existing stored tunnel
      description: |-
        Updates an existing stored tunnel by the provided `id` parameter.
         You need to provide all fields like those you used to create the stored tunnel. Partial updates are not supported. You can get `id` by using the listing API. You get the id also when you store a new value.
      parameters:
        - name: client_id
          in: path
          description: Unique client ID
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Unique script ID
          required: true
          schema:
            type: string
      requestBody:
        description: value in the json format
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/StoredTunnel'
        required: true
      responses:
        '200':
          description: Successful Operation
          content:
            '*/*':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/StoredTunnel'
        '400':
          description: Invalid body parameters
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
      x-codegen-request-body-name: body
    delete:
      tags:
        - Clients and Tunnels
      summary: Deletes an existing stored tunnel
      parameters:
        - name: client_id
          in: path
          description: Unique client ID
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Unique stored tunnel ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful Operation
          content: {}
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '404':
          description: cannot find stored tunnel by the provided id
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /schedules:
    get:
      tags:
        - Jobs
      summary: List schedules
      description: Reads all schedules or find some based on the input parameters
      parameters:
        - name: sort
          in: query
          description: >-
            Sort field to be used for sorting, the sorting direction is by
            default ASC.
             To change the direction add `-` to the sorting value e.g. `-id`. Allowed values are `id`, `created_at`, `created_by`, `name`, `type`.
             You can use as many sort parameters as you want.
          schema:
            type: string
        - name: filter[<FIELD>]
          in: query
          description: >-
            Filter the results. It should be provided in the format as
            `filter[<FIELD>]=<VALUE>`,
             where `<FIELD>` is one of the values `id`, `created_at`, `created_by`, `name`, `type`, `client_ids`, `group_ids` and `<VALUE>` is the search value,
             e.g. `filter[name]=Schedule` will request only schedule with name Schedule. You can use as many filter parameters as you want.
             If you want to filter by multiple values e.g. find entries either for name = Schedule or Other you can use following filters
             `filter[name]=Schedule,Other`.
             Wildcards `*` are supported in the filter `<value>`.
          schema:
            type: string
        - name: page
          in: query
          description: >-
            Pagination options `page[limit]` and `page[offset]` can be used to
            get more than the first page of results. Default limit is 20 and
            maximum is 100. The `count` property in meta shows the total number
            of results.
          schema:
            type: integer
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Schedule'
                  meta:
                    type: object
                    properties:
                      count:
                        type: integer
        '400':
          description: unsupported sort field 'xyz'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
    post:
      tags:
        - Jobs
      summary: Creates a new schedule
      description: Creates a new schedule.
      requestBody:
        description: value in the json format
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Schedule'
        required: true
      responses:
        '201':
          description: Successful Create Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Schedule'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
      x-codegen-request-body-name: body
  /schedules/{id}:
    get:
      tags:
        - Jobs
      summary: Get a schedule
      description: Get a schedule by the provided ID
      parameters:
        - name: id
          in: path
          description: Unique schedule ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Schedule'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '404':
          description: Cannot find a schedule by the provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
    put:
      tags:
        - Jobs
      summary: Updates an existing schedule
      description: |-
        Updates an existing schedule by the provided `id` parameter.
         You need to provide all fields like those you used to create a schedule. Partial updates are not supported. You can get `id` by using the listing API. You get the id also when you store a new value.
      parameters:
        - name: id
          in: path
          description: Unique schedule ID
          required: true
          schema:
            type: string
      requestBody:
        description: value in the json format
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Schedule'
        required: true
      responses:
        '200':
          description: Successful Operation
          content:
            '*/*':
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Schedule'
        '400':
          description: Invalid body parameters
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
      x-codegen-request-body-name: body
    delete:
      tags:
        - Jobs
      summary: Deletes an existing schedule
      description: Delete a schedule by the provided `id` parameter.
      parameters:
        - name: id
          in: path
          description: Unique schedule ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful Operation
          content: {}
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '404':
          description: cannot find command by the provided id
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
  /files:
    post:
      tags:
        - Upload
      summary: Upload file
      description: >-
        Handles file uploads as a multipart/form-data. Files are stored on the
        rport server in a temp location.
         Then all specified clients download them by sftp protocol to a temp location as well. 
         If download was successful, clients move the temp file to the destination path
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - client_id
                - dest
                - upload
              properties:
                upload:
                  type: string
                  description: The file to upload
                  format: binary
                client_id:
                  type: string
                  description: >-
                    Client ID where the file should be placed. You can repeat
                    'client' parameter to indicate multiple clients
                group_id:
                  type: string
                  description: >-
                    ID of a client group where the file should be placed. You
                    can repeat 'group_id' parameter to indicate multiple groups
                dest:
                  type: string
                  description: >-
                    Absolute path with the file name on the client where the
                    file should be placed
                force:
                  type: string
                  description: >-
                    If true, rport client will overwrite destination file if it
                    exists or fail otherwise.
                     You can provide values like true or 1 or on to enable this flag
                sync:
                  type: string
                  description: >-
                    If true and the destination file exists, rport client will
                    compare md5 checksum of the provided file 
                     with the destination file and will overwrite it if it's not matching. On Unix it will also compare file mode, owner and group 
                     of the existing file with the provided values and if they don't match, rport client will execute chmod/chown operations on the destination path. 
                     if false or file doesn't exists, the provided file will be copied to the destination.
                mode:
                  type: string
                  description: >-
                    For Unix only, indicates the desired file mode of the target
                    file on the client. If the file doesn't exist, it will be
                    created with the provided mode. 
                     If file exists (and sync is true), rport client will run chmod operation with the provided file mode.
                user:
                  type: string
                  description: >-
                    For Unix only, indicates the desired owner name the target
                    file on the client. 
                     The uploaded file will be created with the default owner in a temp folder. If `user` is not empty, rport client will perform chown operation on the temp file. 
                     Then it will be moved to the target path Please make sure that the provided user exists on the client.
                     Since changing owner of a file requires sudo rights, the rport client user should have the necessary permissions to chown and move file to the target location.
                group:
                  type: string
                  description: >-
                    For Unix only, indicates the group name the target file on
                    the client. 
                     The uploaded file will be created with the default group in a temp folder. Then rport client will chown the temp file with the provided group name. 
                     Then it will be moved to the target path. Please make sure that the provided group exists on the client.
                     Since changing group of a file requires sudo rights, the rport client user should have the necessary permissions to chown and move file to the target location.
        required: true
      responses:
        '200':
          description: >-
            Successful Operation. In this case it indicates that the file was
            successfully sent to the server rather than to the clients.
             Sending to clients is an async operation, which can be tracked with the websocket API.
             To see if clients have received the file as well, use `/ws/uploads` endpoint.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ServerUploadResponse'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        '500':
          description: Invalid Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
components:
  schemas:
    Tunnel:
      type: object
      properties:
        id:
          type: string
        client_id:
          type: string
        lhost:
          type: string
          description: server listens to this host
        lport:
          type: string
          description: server listens to this port
        rhost:
          type: string
          description: client proxies connection to this host
        rport:
          type: string
          description: client proxies connection to this port
        lport_random:
          type: boolean
          description: True if lport was chosen automatically with a random available port.
        scheme:
          type: string
          description: URI scheme.
        protocol:
          type: string
          description: tcp or udp
        acl:
          type: string
          description: >-
            IP v4 addresses who is allowed to use the tunnel (ipv6 is not
            supported yet). For example, '142.78.90.8,201.98.123.0/24,'.
        http_proxy:
          type: boolean
          description: True if tunnel proxy was created.
        host_header:
          type: string
          description: host name to set as http header field 'Host'
    Client:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          description: client name
        os:
          type: string
          description: long description of client OS
        os_full_name:
          type: string
          description: >-
            short description of client OS (e.g. Microsoft Windows Server 2016
            Standard)
        os_version:
          type: string
          description: version info about client's OS e.g. 10.0.14393 Build 14393
        os_arch:
          type: string
          description: 'client cpu architecture (ex: 386, amd64)'
        os_family:
          type: string
          description: 'client OS family (ex: debian, alpine, Standalone Workstation)'
        os_kernel:
          type: string
          description: 'client OS kernel (ex: linux, windows)'
        os_virtualization_system:
          type: string
          description: >-
            info about the VM where client is running e.g. KVM, LXC, HyperV,
            VMWare, Xen
        os_virtualization_role:
          type: string
          description: role of the client in the running VM e.g. host or guest
        hostname:
          type: string
          description: client hostname
        cpu_family:
          type: string
          description: client's processor family info
        cpu_model:
          type: string
          description: client's processor model info, e.g. 85
        cpu_vendor:
          type: string
          description: processor's vendor name , e.g. Intel
        cpu_model_name:
          type: string
          description: >-
            human readable name of the client's processor model, e.g. Intel(R)
            Xeon(R) Silver 4110 CPU @ 2.10GHz
        num_cpus:
          type: integer
          description: Number of cpu cores in the client's machine
        mem_total:
          type: number
          description: Total memory in bytes
        timezone:
          type: string
          description: Client's timezone e.g. PDT (UTC-07:00)
        ipv4:
          type: array
          description: list of IPv4 addresses of the client
          items:
            type: string
        ipv6:
          type: array
          description: list of IPv6 addresses of the client
          items:
            type: string
        tags:
          type: array
          items:
            type: string
        version:
          type: string
          description: client version
        address:
          type: string
          description: client address
        tunnels:
          type: array
          items:
            $ref: '#/components/schemas/Tunnel'
        connection_state:
          type: string
          description: indicates whether a client is connected or disconnected
          enum:
            - connected
            - disconnected
        disconnected_at:
          type: string
          description: time when a client was disconnected. If null - it's connected
          format: data-time
        client_auth_id:
          type: string
          description: rport client authentication ID that was used to connect to server
        allowed_user_groups:
          type: array
          description: >-
            list of user groups that are allowed to access this client.
            Administrators have always full-access to all clients. Empty list
            prevents access for everyone except admins
          items:
            type: string
        updates_status:
          $ref: '#/components/schemas/UpdatesStatus'
        client_configuration:
          $ref: '#/components/schemas/ClientConfiguration'
    ClientConfiguration:
      type: object
      description: JSON encoded information about client configuration
    ClientGroup:
      type: object
      properties:
        id:
          type: string
          description: Client Group ID
        description:
          type: string
          description: Client Group description
        client_ids:
          type: array
          description: >-
            Read Only field. Shows active and disconnected clients that belong
            to this group.
          items:
            type: string
        params:
          type: object
          properties:
            client_id:
              type: array
              description: client ID(s)
              items:
                type: string
            name:
              type: array
              description: client name(s)
              items:
                type: string
            os:
              type: array
              description: client OS description(s)
              items:
                type: string
            os_arch:
              type: array
              description: 'client cpu architecture(s) (ex: 386, amd64)'
              items:
                type: string
            os_family:
              type: array
              description: 'client OS family (ex: debian, alpine, Standalone Workstation)'
              items:
                type: string
            os_kernel:
              type: array
              description: 'client OS kernel(s) (ex: linux, windows)'
              items:
                type: string
            hostname:
              type: array
              description: client hostname(s)
              items:
                type: string
            ipv4:
              type: array
              description: client IPv4 address(es)
              items:
                type: string
            ipv6:
              type: array
              description: client IPv6 address(es)
              items:
                type: string
            tag:
              type: array
              description: client tag(s)
              items:
                type: string
            version:
              type: array
              description: client version(s)
              items:
                type: string
            address:
              type: array
              description: client address(es)
              items:
                type: string
            client_auth_id:
              type: array
              description: client auth ID(s)
              items:
                type: string
          description: >
            Parameters that define what clients belong to a given client group.


            Each parameter can be specified by:
             1. exact match of the property (ignoring case). For example, "client_id": ["test-win2019-tk01", "qa-lin-ubuntu16"]
             2. dynamic criteria using wildcards (ignoring case). For example, "os_family": ["linux*"]

            For more details please see
            https://oss.rport.io/docs/no04-client-groups.html
    ClientAuth:
      type: object
      properties:
        id:
          type: string
          description: client auth ID
        password:
          type: string
          description: client auth password
    SinglePassword:
      type: object
      properties:
        password:
          type: string
          description: A string of printed symbols 32 and 256 bits long
    JobStatus:
      type: string
      enum:
        - running
        - successful
        - unknown
        - failed
    Job:
      type: object
      properties:
        jid:
          type: string
          description: job ID
        client_id:
          type: string
          description: client ID
        client_name:
          type: string
          description: client name
        pid:
          type: integer
          description: process ID
        status:
          type: string
          description: command status
          enum:
            - running
            - successful
            - unknown
            - failed
        command:
          type: string
          description: executed command
        cwd:
          type: string
          description: current working directory for an executable command
        is_sudo:
          type: boolean
          description: execute the command as a sudo user
        interpreter:
          type: string
          description: command interpreter that was used to execute the command
        started_at:
          type: string
          description: command start time
          format: data-time
        finished_at:
          type: string
          description: command finish time
          format: data-time
        created_by:
          type: string
          description: API username who run the command
        timeout_sec:
          type: integer
          description: timeout in seconds that was used to observe the command execution
        multi_job_id:
          type: string
          description: >-
            multi-client job ID. If it is set then it means this command was
            initiated by running a multi-client job
        error:
          type: string
          description: >-
            is non-empty when it wasn't able to execute a command on rport
            client
        result:
          type: object
          properties:
            stdout:
              type: string
              description: process standard output
            stderr:
              type: string
              description: process standard error
            summary:
              type: string
              description: summary output extracted from stdout using summary tag
          description: command execution result
    JobSummary:
      type: object
      properties:
        jid:
          type: string
          description: job ID
        status:
          type: string
          description: command status
          enum:
            - running
            - successful
            - unknown
            - failed
        finished_at:
          type: string
          description: command finish time
          format: data-time
        result:
          type: object
          properties:
            summary:
              type: string
              description: summary output extracted from stdout using summary tag
    MultiJob:
      type: object
      properties:
        jid:
          type: string
          description: multi-client job ID
        started_at:
          type: string
          description: command finish time
          format: data-time
        created_by:
          type: string
          description: API username who run the command
        schedule_id:
          type: string
          description: Optional ID of the schedule the job was started by
          format: uuid
        client_ids:
          type: array
          description: list of client IDs where the command was requested to run
          items:
            type: string
        group_ids:
          type: array
          description: list of client group IDs where the command was requested to run
          items:
            type: string
        command:
          type: string
          description: executed command
        cwd:
          type: string
          description: current working directory for an executable command
        is_sudo:
          type: boolean
          description: execute the command as a sudo user
        interpreter:
          type: string
          description: command interpreter that was used to execute the command
        timeout_sec:
          type: integer
          description: >-
            timeout in seconds that was used to observe the command execution on
            each client
        concurrent:
          type: boolean
          description: whether command was executed sequentially or concurrently on clients
        abort_on_err:
          type: boolean
          description: >-
            whether command was specified to abort or not the whole cycle, if
            the execution fails on some client. Not applicable if 'concurrent'
            is true
        jobs:
          type: array
          description: clients' jobs, limited to 100
          items:
            $ref: '#/components/schemas/Job'
    MultiJobSummary:
      type: object
      properties:
        jid:
          type: string
          description: multi-client job ID
        started_at:
          type: string
          description: command finish time
          format: data-time
        created_by:
          type: string
          description: API username who run the command
        schedule_id:
          type: string
          description: Optional ID of the schedule the job was started by
          format: uuid
    UserGet:
      type: object
      properties:
        username:
          type: string
          description: Username
        groups:
          type: array
          description: List of groups to which the current user belongs
          items:
            type: string
        two_fa_send_to:
          type: string
          description: >-
            Holds either the email or the pushover token of the user. It's used
            to deliver 2FA token to user when 2FA is enabled
    UserPost:
      type: object
      properties:
        username:
          type: string
          description: Username for the credentials pair
        password:
          type: string
          description: Password for the credentials pair
        groups:
          type: array
          description: List of groups to which the current user belongs
          items:
            type: string
        two_fa_send_to:
          type: string
          description: >-
            Holds either the email or the pushover token of the user. It's used
            to deliver 2FA token to user when 2FA is enabled
    ErrorPayload:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorPayloadItem'
    ErrorPayloadItem:
      type: object
      properties:
        code:
          type: string
        title:
          type: string
        detail:
          type: string
    ExecuteCmdRequest:
      type: object
      properties:
        command:
          type: string
          description: >-
            remote command to execute by rport client(s). NOTE: if command
            limitation is enabled by an rport client then a full path command
            can be required to use. See
            https://oss.rport.io/docs/no06-command-execution.html for more
            details
        cwd:
          type: string
          description: current working directory where the command will be executed
        is_sudo:
          type: boolean
          description: execute the command as a sudo user
        client_ids:
          minItems: 1
          type: array
          description: list of client IDs where to run the command
          items:
            type: string
        interpreter:
          type: string
          description: >-
            command interpreter to use to execute the command. Is applicable
            only for windows clients. If not set 'cmd' is used by default
          enum:
            - cmd
            - powershell
        timeout_sec:
          type: integer
          description: >-
            timeout in seconds to observe the command execution on each client
            separately. If not set a default timeout (60 seconds) is used
        execute_concurrently:
          type: boolean
          description: >-
            applicable only when multiple clients are specified. If true -
            execute the command concurrently on clients. If false - sequentially
            in order that is in 'client_ids'. By default is false
        abort_on_error:
          type: boolean
          description: >-
            applicable only when multiple clients are specified. Applicable only
            if 'execute_concurrently' is false. If true - abort the entire cycle
            if the execution fails on some client. By default is true
      description: >-
        Request that contains a remote command to execute by rport client(s) and
        other related properties
    ExecuteScriptRequest:
      type: object
      properties:
        script:
          type: string
          description: script to execute by rport client(s) in base64 format.
        cwd:
          type: string
          description: current working directory where the script will be executed
        is_sudo:
          type: boolean
          description: execute the command as a sudo user
        client_ids:
          minItems: 1
          type: array
          description: list of client IDs where to run the script
          items:
            type: string
        interpreter:
          type: string
          description: >-
            command interpreter to use to execute the script. If not set 'cmd'
            is used by default on Windows, and '/bin/sh' on Unix. 
             For tacoscript interpreter you should install tacoscript binary from here: https://github.com/cloudradar-monitoring/tacoscript#installation. 
             It should also be available in the system path.
             Additionally, you can use interpreter aliases or full absolute paths to an interpreter of your choice (see https://oss.rport.io/docs/no14-scripts.html#scripts-execution for details).
          enum:
            - cmd
            - powershell
            - tacoscript
        timeout_sec:
          type: integer
          description: >-
            timeout in seconds to observe the script execution on each client
            separately. If not set a default timeout (60 seconds) is used
        execute_concurrently:
          type: boolean
          description: >-
            applicable only when multiple clients are specified. If true -
            execute the script concurrently on clients. If false - sequentially
            in order that is in 'client_ids'. By default is false
        abort_on_error:
          type: boolean
          description: >-
            applicable only when multiple clients are specified. Applicable only
            if 'execute_concurrently' is false. If true - abort the entire cycle
            if the execution fails on some client. By default is true
      description: >-
        Request that contains a remote script to execute by rport client(s) and
        other related properties
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: >-
            Authorization JWT token. If 2fa or TotP is enabled, this token can
            only be used to verify delivered or generated code with the
            `/verify-2fa` endpoint. 
             In the case with TotP, this token can be used to create the first secret with the /me/totp-secret endpoint.
        two_fa:
          type: object
          properties:
            send_to:
              type: string
              description: >-
                Recipient (email or pushover user key) that is used to send 2fa
                token to the user
            delivery_method:
              type: string
              description: |-
                Delivery method that is used to send 2fa token to the user. 
                 `totp_authenticator_app` value indicates that user has enabled time based one time passwords.
              enum:
                - email
                - pushover
                - totp_authenticator_app
            totp_key_status:
              type: string
              description: >-
                If current user has generated a TotP secret key already, the
                result will be `existing` and `pending` otherwise
              enum:
                - pending
                - exists
          description: 2FA information. It's null when 2fa is disabled
      description: Response returned by `/login` endpoints
    VaultEntryInput:
      type: object
      properties:
        client_id:
          type: string
          description: >-
            Used to tie a document to a specific client where 0 means the
            document can be accessed from any client.
        required_group:
          type: string
          description: >-
            if filled, users not belonging to this group are not allowed to
            store or read the decrypted value
        key:
          type: string
          description: '[required] some string to identify the document'
        value:
          type: string
          description: >-
            [required] value represents the encrypted `body` of a document. It
            should be provided as a plain text
        type:
          type: string
          description: '[required] Type of the secret value'
          enum:
            - text
            - secret
            - markdown
            - string
    VaultEntryOutputFull:
      type: object
      properties:
        client_id:
          type: string
          description: >-
            Used to tie a document to a specific client where 0 means the
            document can be accessed from any client.
        required_group:
          type: string
          description: >-
            if filled, users not belonging to this group are not allowed to
            store or read the decrypted value
        key:
          type: string
          description: some string to identify the document
        type:
          type: string
          description: Type of the secret value
          enum:
            - text
            - secret
            - markdown
            - string
        value:
          type: string
          description: decrypted value of the vault entry
        id:
          type: integer
          description: Unique internal id of a vault entry
        created_at:
          type: string
          description: Date and time of vault entry creation
          format: data-time
        updated_at:
          type: string
          description: Date and time of vault entry last update
          format: data-time
        created_by:
          type: string
          description: User name who created this vault entry
        updated_by:
          type: string
          description: User name who last updated this vault entry
    VaultEntryOutputShort:
      type: object
      properties:
        client_id:
          type: string
          description: >-
            Used to tie a document to a specific client where 0 means the
            document can be accessed from any client.
        key:
          type: string
          description: some string to identify the document
        id:
          type: integer
          description: Unique internal id of a vault entry
        created_at:
          type: string
          description: Date and time of vault entry creation
          format: data-time
        created_by:
          type: string
          description: User name who created this vault entry
    Script:
      type: object
      properties:
        name:
          type: string
          description: User-friendly name of a script
        id:
          type: string
          description: unique internal identifier of a script in uuid4 format
        created_at:
          type: string
          description: Date and time of script creation
          format: data-time
        created_by:
          type: string
          description: User name who created this script
        updated_at:
          type: string
          description: Date and time of script update
          format: data-time
        updated_by:
          type: string
          description: User name who updated this script
        interpreter:
          type: string
          description: >-
            how will the script be executed on the client, e.g. /bin/sh,
            cmd.exe, powershell, tacoscript
        cwd:
          type: string
          description: current working directory, where the script should be executed
        script:
          type: string
          description: text of the script
        is_sudo:
          type: boolean
          description: if true, this script will be executed as a sudo user
        tags:
          type: array
          description: List of tags for the script
          items:
            type: string
    ScriptInput:
      type: object
      properties:
        name:
          type: string
          description: '[required] User-friendly name of a script'
        script:
          type: string
          description: '[required] text of the script'
        interpreter:
          type: string
          description: >-
            how will the script be executed on the client, e.g. /bin/sh,
            cmd.exe, powershell, tacoscript
        cwd:
          type: string
          description: current working directory, where the script should be executed
        is_sudo:
          type: boolean
          description: if true, this script will be executed as a sudo user
        tags:
          type: array
          description: List of tags for the script
          items:
            type: string
    UpdatesStatus:
      type: object
      properties:
        refreshed:
          type: string
          description: When was the status refreshed
          format: date-time
        updates_available:
          type: integer
          description: Number of updates available
        security_updates_available:
          type: integer
          description: Number of security updates available
        updates_summaries:
          type: array
          description: List of available updates
          items:
            $ref: '#/components/schemas/UpdateSummary'
        reboot_pending:
          type: boolean
          description: Is reboot required at the moment
        error:
          type: string
          description: Error that happened when refreshing status if any
        hint:
          type: string
          description: Suggested solution to the error if any
    UpdateSummary:
      type: object
      properties:
        title:
          type: string
          description: Title of the update
        description:
          type: string
          description: Description of the update
        reboot_required:
          type: boolean
          description: Whether the update requires reboot
        is_security_update:
          type: boolean
          description: Whether this is a security update
    Command:
      type: object
      properties:
        name:
          type: string
          description: User-friendly name of a command
        id:
          type: string
          description: unique internal identifier of a command in uuid4 format
        created_at:
          type: string
          description: Date and time of command creation
          format: data-time
        created_by:
          type: string
          description: User name who created this command
        updated_at:
          type: string
          description: Date and time of last command update
          format: data-time
        updated_by:
          type: string
          description: User name who last updated this command
        cmd:
          type: string
          description: text of the command
        tags:
          type: array
          description: List of tags for the script
          items:
            type: string
    CommandInput:
      type: object
      properties:
        name:
          type: string
          description: '[required] User-friendly name of a commend'
        script:
          type: string
          description: '[required] text of the command'
        tags:
          type: array
          description: List of tags for the script
          items:
            type: string
    TotP:
      type: object
      properties:
        secret:
          type: string
          description: Secret key for time based one time password Authenticator
        qr:
          type: string
          description: >-
            base64 encoded png image (200x200px) with the QR code, needed to add
            a rport account in an Authenticator app
    AuditLog:
      type: object
      properties:
        timestamp:
          type: string
          description: Timestamp of the action
          format: date-time
        username:
          type: string
          description: Username of the user that initiated the action
        remote_ip:
          type: string
          description: IP of the user that initiated the action
        application:
          type: string
          description: Part of the rport that the action belongs to
        action:
          type: string
          description: Action performed
        affected_id:
          type: string
          description: ID of the entity that action was executed on
        client_id:
          type: string
          description: ID of the client that has been affected
        client_hostname:
          type: string
          description: Hostname of the client that has been affected
        request:
          type: string
          description: Json blob that was used to request the action
        response:
          type: string
          description: Json blob that was the result of the action
    GraphMetrics:
      type: object
      properties:
        timestamp:
          type: string
          description: Timestamp of measurement
          format: date-time
        cpu_usage_percent:
          type: object
          properties:
            avg:
              type: number
              description: cpu_usage_percent average
            min:
              type: number
              description: cpu_usage_percent minimum
            max:
              type: number
              description: cpu_usage_percent maximum
        memory_usage_percent:
          type: object
          properties:
            avg:
              type: number
              description: memory_usage_percent average
            min:
              type: number
              description: memory_usage_percent minimum
            max:
              type: number
              description: memory_usage_percent maximum
        io_usage_percent:
          type: object
          properties:
            avg:
              type: number
              description: io_usage_percent average
            min:
              type: number
              description: io_usage_percent minimum
            max:
              type: number
              description: io_usage_percent maximum
    GraphMetricsGraph:
      type: object
      properties:
        timestamp:
          type: string
          description: Timestamp of measurement
          format: date-time
        cpu_usage_percent:
          type: object
          properties:
            avg:
              type: number
              description: cpu_usage_percent average
            min:
              type: number
              description: cpu_usage_percent minimum
            max:
              type: number
              description: cpu_usage_percent maximum
        memory_usage_percent:
          type: object
          properties:
            avg:
              type: number
              description: memory_usage_percent average
            min:
              type: number
              description: memory_usage_percent minimum
            max:
              type: number
              description: memory_usage_percent maximum
        io_usage_percent:
          type: object
          properties:
            avg:
              type: number
              description: io_usage_percent average
            min:
              type: number
              description: io_usage_percent minimum
            max:
              type: number
              description: io_usage_percent maximum
        net_usage_percent_lan:
          type: object
          properties:
            in_avg:
              type: number
              description: net_usage_percent_lan average input
            in_min:
              type: number
              description: net_usage_percent_lan minimum input
            in_max:
              type: number
              description: net_usage_percent_lan maximum input
            out_avg:
              type: number
              description: net_usage_percent_lan average output
            out_min:
              type: number
              description: net_usage_percent_lan minimum output
            out_max:
              type: number
              description: net_usage_percent_lan maximum output
        net_usage_bps_lan:
          type: object
          properties:
            in_avg:
              type: number
              description: net_usage_bps_lan average input
            in_min:
              type: number
              description: net_usage_bps_lan minimum input
            in_max:
              type: number
              description: net_usage_bps_lan maximum input
            out_avg:
              type: number
              description: net_usage_bps_lan average output
            out_min:
              type: number
              description: net_usage_bps_lan minimum output
            out_max:
              type: number
              description: net_usage_bps_lan maximum output
        net_usage_percent_wan:
          type: object
          properties:
            in_avg:
              type: number
              description: net_usage_percent_wan average input
            in_min:
              type: number
              description: net_usage_percent_wan minimum input
            in_max:
              type: number
              description: net_usage_percent_wan maximum input
            out_avg:
              type: number
              description: net_usage_percent_wan average output
            out_min:
              type: number
              description: net_usage_percent_wan minimum output
            out_max:
              type: number
              description: net_usage_percent_wan maximum output
        net_usage_bps_wan:
          type: object
          properties:
            in_avg:
              type: number
              description: net_usage_bps_wan average input
            in_min:
              type: number
              description: net_usage_bps_wan minimum input
            in_max:
              type: number
              description: net_usage_bps_wan maximum input
            out_avg:
              type: number
              description: net_usage_bps_wan average output
            out_min:
              type: number
              description: net_usage_bps_wan minimum output
            out_max:
              type: number
              description: net_usage_bps_wan maximum output
    Metrics:
      type: object
      properties:
        timestamp:
          type: string
          description: Timestamp of measurement
          format: date-time
        cpu_usage_percent:
          type: number
          description: cpu_usage_percent
        memory_usage_percent:
          type: number
          description: memory_usage_percent
        io_usage_percent:
          type: number
          description: io_usage_percent
    Mountpoints:
      type: object
      properties:
        timestamp:
          type: string
          description: Timestamp of measurement
          format: date-time
        mountpoints:
          type: string
          description: JSON encoded information about mountpoints
    Processes:
      type: object
      properties:
        timestamp:
          type: string
          description: Timestamp of measurement
          format: date-time
        processes:
          type: string
          description: JSON encoded information about processes
    StoredTunnel:
      type: object
      properties:
        id:
          type: string
          description: unique internal identifier of a stored tunnel in uuid4 format
          readOnly: true
        created_at:
          type: string
          description: Date and time of stored tunnel creation
          format: data-time
          readOnly: true
        name:
          type: string
          description: Name of the stored tunnel
        remote_ip:
          type: string
          description: Remote for the stored tunnel
        remote_port:
          type: integer
          description: Remote port for the stored tunnel
        public_port:
          type: integer
          description: Public port for the stored tunnel
        scheme:
          type: string
          description: URI scheme for the stored tunnel
        acl:
          type: string
          description: ACL for the stored tunnel
        further_options:
          type: object
          properties: {}
          description: Further options for the stored tunnel
    Schedule:
      type: object
      properties:
        id:
          type: string
          description: unique internal identifier of the schedule in uuid4 format
          format: uuid
          readOnly: true
        created_at:
          type: string
          description: Date and time of schedule creation
          format: data-time
          readOnly: true
        created_by:
          type: string
          description: Username of the user who created the schedule
          readOnly: true
        name:
          type: string
          description: Name of the schedule
        schedule:
          type: string
          description: Schedule in the cron format
          example: '* * * * *'
        type:
          type: string
          description: '''command'' or ''script'''
          example: command
        client_ids:
          type: array
          description: Client IDs that schedule will be executed on
          items:
            type: string
        group_ids:
          type: array
          description: Group IDs that schedule will be executed on
          items:
            type: string
        command:
          type: string
          description: Command to be executed, only for type 'command'
        script:
          type: string
          description: Base64 encoded script to be executed, only for type 'script'
        interpreter:
          type: string
          description: >-
            Interpreter for schedule execution, for details on this and other
            params see commands or scripts
        cwd:
          type: string
          description: Cwd for schedule execution
        is_sudo:
          type: boolean
          description: Is sudo for schedule execution
        timeout_sec:
          type: number
          description: Timeout for schedule execution
        execute_concurrently:
          type: boolean
          description: Whether to execute concurrently on all clients
        abort_on_error:
          type: boolean
          description: Abort on error for schedule execution
        overlaps:
          type: boolean
          description: >-
            Whether to start another schedule execution when previous is still
            in progress
        last_execution:
          type: object
          properties:
            started_at:
              type: string
              description: Date and time of last schedule exeuction
              format: data-time
            client_count:
              type: number
              description: Count of clients that schedule was last executed on
            success_count:
              type: number
              description: Count of clients that schedule was last successfully executed on
            status:
              type: string
              description: >-
                Status of last schedule execution (only available when
                `client_count=1`)
            summary:
              type: string
              description: >-
                Summary of last schedule execution (only available when
                `client_count=1`)
          readOnly: true
    ServerUploadResponse:
      type: object
      properties:
        uuid:
          type: string
          description: unique upload request identifier
          readOnly: true
        filepath:
          type: string
          description: Target path from input
          readOnly: true
        size:
          type: number
          description: File size in bytes
    ClientUploadResponse:
      type: object
      properties:
        uuid:
          type: string
          description: unique upload request identifier
        client_id:
          type: string
          description: client id
        filepath:
          type: string
          description: Target path where the file was copied to
        size:
          type: number
          description: File size in bytes
        message:
          type: string
          description: Custom message as an additional explanation to the status
        status:
          type: string
          description: >-
            `success` indicates successful file downloads on the client, however
            failures for chown and chmod operations are just reported as
            warnings.
             `error` status indicates upload failures, where message field will contain failure details. 
             `ignored` is returned when the target file already exists and is not forced or no sync is needed
          enum:
            - success
            - error
            - ignored
  securitySchemes:
    basic_auth:
      type: http
      description: >-
        HTTP-basic authentication works for all routes. You can use user's
        password only when 2FA is not enabled. For scripting you can use
        long-lived API token generated using /me/token endpoint instead of the
        password.
      scheme: basic
    bearer_auth:
      type: apiKey
      description: >-
        Instead of HTTP basic authentication you can retrieve a bearer token
        using /login endpoint. Send the retrieved token in 'Authorization:
        Bearer <TOKEN>' header. If 2FA is enabled, the bearer token from /login
        endpoint can only be used in /verify-2fa or /me/totp-secret endpoints
        (see below).
      name: Authorization
      in: header
