// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 001_init.down.sql (20B)
// 001_init.up.sql (501B)

package scripts

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x4e\x2e\xca\x2c\x28\x29\xb6\xe6\x02\x04\x00\x00\xff\xff\x24\x6d\x54\xc3\x14\x00\x00\x00")

func _001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initDownSql,
		"001_init.down.sql",
	)
}

func _001_initDownSql() (*asset, error) {
	bytes, err := _001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.down.sql", size: 20, mode: os.FileMode(0644), modTime: time.Unix(1621947703, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd4, 0x6f, 0x27, 0xe0, 0x17, 0x7c, 0x7b, 0x1d, 0xfe, 0x69, 0xdf, 0x43, 0x5e, 0x10, 0x9a, 0x2, 0x68, 0xfa, 0x83, 0xd7, 0x3d, 0x2c, 0x19, 0xa4, 0x78, 0x4b, 0x12, 0xff, 0x32, 0xf7, 0x16, 0xa5}}
	return a, nil
}

var __001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x6a\x02\x31\x10\x86\xef\x79\x8a\x1f\x2f\x2a\x74\xa1\x9e\xa5\x07\xd1\xd0\x7a\xb1\x45\x53\xea\xcd\xc4\xdd\x11\x42\xd7\xac\x9b\x4c\x28\xfb\xf6\x65\x93\x6d\x41\x91\x76\x6f\xb3\xff\x7c\x5f\x66\xa6\x28\x50\xfc\xf1\x89\xa2\x80\x32\xc7\x9a\x10\xd8\xc7\x92\xa3\x27\x9c\x1a\x8f\x50\x7a\x7b\xe1\x20\xfe\xc3\x4b\x4f\x86\x09\x9c\x15\x03\x34\x11\x00\x60\x2b\xac\x37\x4a\x3e\xcb\x2d\x5c\xc3\x70\xb1\xae\x71\xf1\xf6\x6c\x7c\x87\x4f\xea\x60\x22\x37\xd6\x95\x9e\xce\xe4\xf8\x21\x21\xce\x9c\x09\x4a\xee\x55\x2e\xb3\xbc\x3a\x18\xc6\x6a\xa1\xe4\xaf\xe6\x3a\x3d\x76\x09\xb9\x49\xad\x63\xf2\x17\x4f\x4c\xfe\x6e\x1c\x0e\x21\x56\xcd\xcf\x84\x93\xd9\x14\x15\x9d\x4c\xac\x19\x8f\xb7\xef\x7c\x55\xf7\x0c\x79\xd9\xeb\x44\x4c\xe7\x42\xbc\xbf\xa5\x61\x75\x68\x6b\xcb\x74\x08\xd4\x46\x72\x25\x69\xb1\x93\x0a\x3a\x50\xab\xf1\x84\x59\x72\x7c\xbc\xc8\xad\x84\xee\xd7\xee\x7f\x8e\x87\x03\x8e\xe7\x42\x2c\xb7\xb2\xb7\xac\x37\x2b\xb9\xc7\xa8\xef\x18\x25\xe4\x75\x03\x3d\xb4\x69\xe4\x43\xe7\x14\x8b\xdd\x32\x95\xd3\xb9\xf8\x0e\x00\x00\xff\xff\x47\xce\xdf\x26\xf5\x01\x00\x00")

func _001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSql,
		"001_init.up.sql",
	)
}

func _001_initUpSql() (*asset, error) {
	bytes, err := _001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.up.sql", size: 501, mode: os.FileMode(0644), modTime: time.Unix(1621955664, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x57, 0xb1, 0x96, 0x64, 0xe0, 0xc5, 0xec, 0xf6, 0x65, 0x6a, 0x7c, 0xda, 0x88, 0x4d, 0x29, 0xa2, 0x4a, 0x9b, 0x86, 0x66, 0xa4, 0xc3, 0xe4, 0x73, 0x6a, 0x5b, 0xe9, 0xd1, 0x1f, 0x90, 0x48, 0x77}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_init.down.sql": _001_initDownSql,
	"001_init.up.sql":   _001_initUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_init.down.sql": {_001_initDownSql, map[string]*bintree{}},
	"001_init.up.sql":   {_001_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
