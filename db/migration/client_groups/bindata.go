// Code generated by go-bindata.
// sources:
// 001_init.down.sql
// 001_init.up.sql
// 002_add_allowed_user_groups.down.sql
// 002_add_allowed_user_groups.up.sql
// DO NOT EDIT!
package client_groups

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var __001_init_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\xce\xc9\x4c\xcd\x2b\x89\x4f\x2f\xca\x2f\x2d\x28\xb6\xe6\x02\x04\x00\x00\xff\xff\xee\xde\xdd\xb3\x1a\x00\x00\x00")

func _001_init_down_sql() ([]byte, error) {
	return bindata_read(
		__001_init_down_sql,
		"001_init.down.sql",
	)
}

var __001_init_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\x48\xce\xc9\x4c\xcd\x2b\x89\x4f\x2f\xca\x2f\x2d\x28\x56\xd0\xe0\x52\x50\x50\x50\xc8\x4c\x51\x08\x71\x8d\x08\x51\x08\x08\xf2\xf4\x75\x0c\x8a\x54\xf0\x76\x8d\x54\xf0\xf3\x0f\x51\xf0\x0b\xf5\xf1\xd1\xe1\xe2\x4c\x49\x2d\x4e\x2e\xca\x2c\x28\xc9\xcc\xcf\x83\xa8\x43\x92\x2b\x48\x2c\x4a\xcc\x2d\x46\x15\xe6\xd2\x54\x08\xf7\x0c\xf1\xf0\x0f\x0d\x51\x08\xf2\x0f\xf7\x74\xb1\xe6\x02\x04\x00\x00\xff\xff\xa5\xc7\xf9\xc7\x82\x00\x00\x00")

func _001_init_up_sql() ([]byte, error) {
	return bindata_read(
		__001_init_up_sql,
		"001_init.up.sql",
	)
}

var __002_add_allowed_user_groups_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _002_add_allowed_user_groups_down_sql() ([]byte, error) {
	return bindata_read(
		__002_add_allowed_user_groups_down_sql,
		"002_add_allowed_user_groups.down.sql",
	)
}

var __002_add_allowed_user_groups_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xcc\x29\x49\x2d\x52\x28\x49\x4c\xca\x49\x55\x50\x4a\xce\xc9\x4c\xcd\x2b\x89\x4f\x2f\xca\x2f\x2d\x28\x56\x52\x48\x4c\x49\x51\x48\xcc\xc9\xc9\x2f\x4f\x4d\x89\x2f\x2d\x4e\x2d\x82\x4a\x28\x84\xb8\x46\x84\x28\xf8\xf9\x87\x28\xf8\x85\xfa\xf8\x28\xb8\xb8\xba\x39\x86\xfa\x84\x28\xa8\x47\xc7\xaa\x5b\x03\x02\x00\x00\xff\xff\x73\xd5\xd2\x17\x4f\x00\x00\x00")

func _002_add_allowed_user_groups_up_sql() ([]byte, error) {
	return bindata_read(
		__002_add_allowed_user_groups_up_sql,
		"002_add_allowed_user_groups.up.sql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"001_init.down.sql":                    _001_init_down_sql,
	"001_init.up.sql":                      _001_init_up_sql,
	"002_add_allowed_user_groups.down.sql": _002_add_allowed_user_groups_down_sql,
	"002_add_allowed_user_groups.up.sql":   _002_add_allowed_user_groups_up_sql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"001_init.down.sql":                    &_bintree_t{_001_init_down_sql, map[string]*_bintree_t{}},
	"001_init.up.sql":                      &_bintree_t{_001_init_up_sql, map[string]*_bintree_t{}},
	"002_add_allowed_user_groups.down.sql": &_bintree_t{_002_add_allowed_user_groups_down_sql, map[string]*_bintree_t{}},
	"002_add_allowed_user_groups.up.sql":   &_bintree_t{_002_add_allowed_user_groups_up_sql, map[string]*_bintree_t{}},
}}
